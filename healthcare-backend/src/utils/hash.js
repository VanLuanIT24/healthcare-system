// src/utils/hash.js
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const { appConfig } = require('../config');

/**
 * üõ°Ô∏è TI·ªÜN √çCH M√É H√ìA V√Ä B·∫¢O M·∫¨T
 * - M√£ h√≥a m·∫≠t kh·∫©u v·ªõi bcrypt
 * - T·∫°o token ng·∫´u nhi√™n
 * - Hash d·ªØ li·ªáu c∆° b·∫£n
 */

const SALT_ROUNDS = appConfig.security.saltRounds || 12;

/**
 * üéØ M√É H√ìA M·∫¨T KH·∫®U
 */
async function hashPassword(plainPassword) {
  if (!plainPassword || plainPassword.length < 8) {
    throw new Error('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±');
  }

  try {
    const hashed = await bcrypt.hash(plainPassword, SALT_ROUNDS);
    
    // Validate k·∫øt qu·∫£
    if (!hashed || hashed.length < 60) {
      throw new Error('L·ªói m√£ h√≥a m·∫≠t kh·∫©u');
    }
    
    return hashed;
  } catch (error) {
    console.error('‚ùå L·ªói m√£ h√≥a m·∫≠t kh·∫©u:', error.message);
    throw new Error('Kh√¥ng th·ªÉ m√£ h√≥a m·∫≠t kh·∫©u');
  }
}

/**
 * üéØ SO S√ÅNH M·∫¨T KH·∫®U - ƒê√É TH√äM DEBUG
 */
async function comparePassword(plainPassword, hashedPassword) {
  console.log('üîë [HASH DEBUG] Starting password comparison');
  console.log('üîë [HASH DEBUG] Input:', {
    plainPassword: plainPassword ? `${plainPassword.substring(0, 3)}...` : 'NULL',
    plainLength: plainPassword ? plainPassword.length : 0,
    hashPrefix: hashedPassword ? `${hashedPassword.substring(0, 20)}...` : 'NULL',
    hashLength: hashedPassword ? hashedPassword.length : 0
  });

  if (!plainPassword || !hashedPassword) {
    console.log('‚ùå [HASH DEBUG] Missing password or hash');
    return false;
  }

  // Ki·ªÉm tra ƒë·ªãnh d·∫°ng hash
  if (!hashedPassword.startsWith('$2a$') && !hashedPassword.startsWith('$2b$')) {
    console.log('‚ùå [HASH DEBUG] Invalid hash format');
    return false;
  }

  try {
    const result = await bcrypt.compare(plainPassword, hashedPassword);
    console.log('‚úÖ [HASH DEBUG] Password comparison result:', result);
    return result;
  } catch (error) {
    console.error('‚ùå [HASH DEBUG] Compare password error:', error.message);
    return false;
  }
}

/**
 * üéØ KI·ªÇM TRA ƒê·ªò M·∫†NH M·∫¨T KH·∫®U
 */
function validatePasswordStrength(password) {
  if (!password) {
    return {
      isValid: false,
      score: 0,
      errors: ['M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'],
      suggestions: ['Nh·∫≠p m·∫≠t kh·∫©u']
    };
  }

  const requirements = {
    minLength: password.length >= 8,
    hasUpperCase: /[A-Z]/.test(password),
    hasLowerCase: /[a-z]/.test(password),
    hasNumbers: /\d/.test(password),
  };

  const errors = [];

  if (!requirements.minLength) {
    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±');
  }
  if (!requirements.hasUpperCase) {
    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa');
  }
  if (!requirements.hasLowerCase) {
    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng');
  }
  if (!requirements.hasNumbers) {
    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë');
  }

  const score = Object.values(requirements).filter(Boolean).length;
  const isStrong = errors.length === 0;

  return {
    isValid: isStrong,
    score: score,
    maxScore: 4,
    errors: errors,
    suggestions: isStrong ? [] : [
      'Th√™m k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$%^&*)',
      'S·ª≠ d·ª•ng k·∫øt h·ª£p ch·ªØ hoa v√† th∆∞·ªùng',
      'Th√™m s·ªë v√†o m·∫≠t kh·∫©u'
    ]
  };
}

/**
 * üéØ T·∫†O TOKEN NG·∫™U NHI√äN D·∫†NG HEX
 */
function randomTokenHex(size = 32) {
  if (size < 16) {
    throw new Error('K√≠ch th∆∞·ªõc token ph·∫£i √≠t nh·∫•t 16 bytes');
  }

  try {
    return crypto.randomBytes(size).toString('hex');
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o token:', error.message);
    throw new Error('Kh√¥ng th·ªÉ t·∫°o token ng·∫´u nhi√™n');
  }
}

/**
 * üéØ T·∫†O TOKEN D·∫†NG BASE64 URL SAFE
 */
function randomTokenBase64(size = 24) {
  try {
    return crypto.randomBytes(size).toString('base64url');
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o base64 token:', error.message);
    throw new Error('Kh√¥ng th·ªÉ t·∫°o token base64');
  }
}

/**
 * üéØ M√É H√ìA D·ªÆ LI·ªÜU V·ªöI SHA256
 */
function sha256(data) {
  if (!data) {
    throw new Error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
  }

  if (typeof data !== 'string') {
    data = JSON.stringify(data);
  }

  try {
    return crypto.createHash('sha256').update(data).digest('hex');
  } catch (error) {
    console.error('‚ùå L·ªói hash SHA256:', error.message);
    throw new Error('Kh√¥ng th·ªÉ m√£ h√≥a d·ªØ li·ªáu');
  }
}

module.exports = {
  hashPassword,
  comparePassword,
  validatePasswordStrength,
  randomTokenHex,
  randomTokenBase64,
  sha256,
};