// src/utils/jwt.js
const jwt = require('jsonwebtoken');
const { 
  JWT_ACCESS_SECRET, 
  JWT_REFRESH_SECRET, 
  ACCESS_TOKEN_EXPIRES_IN, 
  REFRESH_TOKEN_EXPIRES_IN 
} = require('../config/jwt.config');
const { ROLE_PERMISSIONS } = require('../constants/roles');

/**
 * üõ°Ô∏è TI·ªÜN √çCH JWT TOKEN 
 * - T·∫°o v√† x√°c th·ª±c access/refresh tokens
 * - Qu·∫£n l√Ω token expiration c∆° b·∫£n
 */

const JWT_CONFIG = {
  issuer: 'healthcare-system',
  audience: 'healthcare-client',
  algorithm: 'HS256'
};

/**
 * üéØ T·∫†O ACCESS TOKEN
 */
function signAccessToken(user) {
  if (!JWT_ACCESS_SECRET) {
    throw new Error('JWT_ACCESS_SECRET kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
  }

  if (!user || !user._id || !user.email || !user.role) {
    throw new Error('Th√¥ng tin user kh√¥ng ƒë·∫ßy ƒë·ªß ƒë·ªÉ t·∫°o token');
  }

  const payload = {
    sub: user._id.toString(),
    email: user.email,
    role: user.role,
    name: user.name,
    permissions: ROLE_PERMISSIONS[user.role] || [],
    type: 'access'
  };

  const options = {
    expiresIn: ACCESS_TOKEN_EXPIRES_IN,
    issuer: JWT_CONFIG.issuer,
    audience: JWT_CONFIG.audience,
    algorithm: JWT_CONFIG.algorithm
  };

  try {
    const token = jwt.sign(payload, JWT_ACCESS_SECRET, options);
    console.log(`üîê Access token created for: ${user.email} (${user.role})`);
    return token;
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o access token:', error.message);
    throw new Error('Kh√¥ng th·ªÉ t·∫°o access token');
  }
}

/**
 * üéØ X√ÅC TH·ª∞C ACCESS TOKEN
 */
function verifyAccessToken(token) {
  if (!token) {
    throw new Error('Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p');
  }

  try {
    const payload = jwt.verify(token, JWT_ACCESS_SECRET, {
      issuer: JWT_CONFIG.issuer,
      audience: JWT_CONFIG.audience,
      algorithms: [JWT_CONFIG.algorithm]
    });

    if (payload.type !== 'access') {
      throw new Error('Token kh√¥ng ph·∫£i l√† access token');
    }

    return payload;
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      throw new Error('Token ƒë√£ h·∫øt h·∫°n');
    } else if (error.name === 'JsonWebTokenError') {
      throw new Error('Token kh√¥ng h·ª£p l·ªá');
    } else {
      throw new Error('L·ªói x√°c th·ª±c token: ' + error.message);
    }
  }
}

/**
 * üéØ T·∫†O REFRESH TOKEN
 */
function signRefreshToken(user) {
  if (!JWT_REFRESH_SECRET) {
    throw new Error('JWT_REFRESH_SECRET kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
  }

  const payload = {
    sub: user._id.toString(),
    email: user.email,
    type: 'refresh'
  };

  const options = {
    expiresIn: REFRESH_TOKEN_EXPIRES_IN,
    issuer: JWT_CONFIG.issuer,
    audience: JWT_CONFIG.audience,
    algorithm: JWT_CONFIG.algorithm
  };

  try {
    const token = jwt.sign(payload, JWT_REFRESH_SECRET, options);
    console.log(`üîÑ Refresh token created for: ${user.email}`);
    return token;
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o refresh token:', error.message);
    throw new Error('Kh√¥ng th·ªÉ t·∫°o refresh token');
  }
}

/**
 * üéØ X√ÅC TH·ª∞C REFRESH TOKEN
 */
function verifyRefreshToken(token) {
  if (!token) {
    throw new Error('Refresh token kh√¥ng ƒë∆∞·ª£c cung c·∫•p');
  }

  try {
    const payload = jwt.verify(token, JWT_REFRESH_SECRET, {
      issuer: JWT_CONFIG.issuer,
      audience: JWT_CONFIG.audience,
      algorithms: [JWT_CONFIG.algorithm]
    });

    if (payload.type !== 'refresh') {
      throw new Error('Token kh√¥ng ph·∫£i l√† refresh token');
    }

    return payload;
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      throw new Error('Refresh token ƒë√£ h·∫øt h·∫°n');
    } else {
      throw new Error('Refresh token kh√¥ng h·ª£p l·ªá: ' + error.message);
    }
  }
}

/**
 * üéØ T·∫†O TOKEN PAIR (ACCESS + REFRESH)
 */
function generateTokenPair(user) {
  const accessToken = signAccessToken(user);
  const refreshToken = signRefreshToken(user);

  return {
    accessToken,
    refreshToken,
    expiresIn: getTokenExpiry(accessToken)
  };
}

/**
 * üéØ KI·ªÇM TRA TH·ªúI GIAN S·ªêNG C√íN L·∫†I C·ª¶A TOKEN
 */
function getTokenExpiry(token) {
  const decoded = jwt.decode(token);
  
  if (!decoded || !decoded.exp) {
    return 0;
  }
  
  const now = Math.floor(Date.now() / 1000);
  return Math.max(0, decoded.exp - now);
}

/**
 * üéØ GI·∫¢I M√É TOKEN (KH√îNG X√ÅC TH·ª∞C)
 */
function decodeToken(token) {
  if (!token) {
    return null;
  }

  try {
    return jwt.decode(token);
  } catch (error) {
    console.error('‚ùå L·ªói gi·∫£i m√£ token:', error.message);
    return null;
  }
}

module.exports = {
  signAccessToken,
  verifyAccessToken,
  signRefreshToken,
  verifyRefreshToken,
  generateTokenPair,
  getTokenExpiry,
  decodeToken,
  JWT_CONFIG,
};