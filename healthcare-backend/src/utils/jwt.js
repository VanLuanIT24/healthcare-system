// src/utils/jwt.js
const jwt = require('jsonwebtoken');
const {
  JWT_ACCESS_SECRET,
  JWT_REFRESH_SECRET,
  ACCESS_TOKEN_EXPIRES_IN,
  REFRESH_TOKEN_EXPIRES_IN,
} = require('../config/jwt.config');

/**
 * TI·ªÜN √çCH L√ÄM VI·ªÜC V·ªöI JWT TOKEN
 * - T·∫°o v√† x√°c th·ª±c access token, refresh token
 * - X·ª≠ l√Ω l·ªói token chi ti·∫øt
 */

/**
 * T·∫†O ACCESS TOKEN CHO NG∆Ø·ªúI D√ôNG
 * 
 * @param {Object} payload - D·ªØ li·ªáu ƒë∆∞a v√†o token
 * @param {string} payload.sub - User ID
 * @param {string} payload.email - Email ng∆∞·ªùi d√πng
 * @param {string} payload.role - Vai tr√≤ ng∆∞·ªùi d√πng
 * @param {string[]} payload.permissions - Danh s√°ch quy·ªÅn
 * @returns {string} Access token
 * 
 * @example
 * const token = signAccessToken({
 *   sub: 'user_id',
 *   email: 'user@example.com',
 *   role: 'DOCTOR'
 * });
 */
function signAccessToken(payload) {
  if (!JWT_ACCESS_SECRET) {
    throw new Error('JWT_ACCESS_SECRET kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
  }

  const options = {
    expiresIn: ACCESS_TOKEN_EXPIRES_IN,
    issuer: 'medauth-api',
    audience: 'medauth-client',
  };

  return jwt.sign(payload, JWT_ACCESS_SECRET, options);
}

/**
 * X√ÅC TH·ª∞C ACCESS TOKEN
 * 
 * @param {string} token - JWT token c·∫ßn x√°c th·ª±c
 * @returns {Object} Payload ƒë√£ gi·∫£i m√£
 * @throws {Error} Khi token kh√¥ng h·ª£p l·ªá
 */
function verifyAccessToken(token) {
  if (!token) {
    throw new Error('Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p');
  }

  try {
    return jwt.verify(token, JWT_ACCESS_SECRET, {
      issuer: 'medauth-api',
      audience: 'medauth-client',
    });
  } catch (error) {
    // üîç PH√ÇN LO·∫†I L·ªñI CHI TI·∫æT
    if (error.name === 'TokenExpiredError') {
      throw new Error('Token ƒë√£ h·∫øt h·∫°n');
    } else if (error.name === 'JsonWebTokenError') {
      throw new Error('Token kh√¥ng h·ª£p l·ªá');
    } else if (error.name === 'NotBeforeError') {
      throw new Error('Token ch∆∞a c√≥ hi·ªáu l·ª±c');
    } else {
      throw new Error('L·ªói x√°c th·ª±c token: ' + error.message);
    }
  }
}

/**
 * T·∫†O REFRESH TOKEN
 * 
 * @param {Object} payload - D·ªØ li·ªáu ƒë∆∞a v√†o token
 * @returns {string} Refresh token
 */
function signRefreshToken(payload) {
  if (!JWT_REFRESH_SECRET) {
    throw new Error('JWT_REFRESH_SECRET kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
  }

  const options = {
    expiresIn: REFRESH_TOKEN_EXPIRES_IN,
    issuer: 'medauth-api',
    audience: 'medauth-client',
  };

  return jwt.sign(payload, JWT_REFRESH_SECRET, options);
}

/**
 * X√ÅC TH·ª∞C REFRESH TOKEN
 * 
 * @param {string} token - Refresh token c·∫ßn x√°c th·ª±c
 * @returns {Object} Payload ƒë√£ gi·∫£i m√£
 */
function verifyRefreshToken(token) {
  if (!token) {
    throw new Error('Refresh token kh√¥ng ƒë∆∞·ª£c cung c·∫•p');
  }

  try {
    return jwt.verify(token, JWT_REFRESH_SECRET, {
      issuer: 'medauth-api',
      audience: 'medauth-client',
    });
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      throw new Error('Refresh token ƒë√£ h·∫øt h·∫°n');
    } else {
      throw new Error('Refresh token kh√¥ng h·ª£p l·ªá: ' + error.message);
    }
  }
}

/**
 * GI·∫¢I M√É TOKEN M√Ä KH√îNG X√ÅC TH·ª∞C CH·ªÆ K√ù
 * (Ch·ªâ s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch debug)
 * 
 * @param {string} token - JWT token
 * @returns {Object} Payload ƒë√£ gi·∫£i m√£
 */
function decodeToken(token) {
  return jwt.decode(token);
}

/**
 * KI·ªÇM TRA TH·ªúI GIAN S·ªêNG C√íN L·∫†I C·ª¶A TOKEN
 * 
 * @param {string} token - JWT token
 * @returns {number} Th·ªùi gian c√≤n l·∫°i (gi√¢y)
 */
function getTokenExpiry(token) {
  const decoded = jwt.decode(token);
  if (!decoded || !decoded.exp) {
    return 0;
  }
  
  const now = Math.floor(Date.now() / 1000);
  return Math.max(0, decoded.exp - now);
}

module.exports = {
  signAccessToken,
  verifyAccessToken,
  signRefreshToken,
  verifyRefreshToken,
  decodeToken,
  getTokenExpiry,
};