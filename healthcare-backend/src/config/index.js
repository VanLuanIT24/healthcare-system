// src/config/index.js
const appConfig = require('./app.config');
const connectDatabase = require('./db.config');
const superAdminService = require('../services/superAdmin.service');

/**
 * KH·ªûI T·∫†O C·∫§U H√åNH H·ªÜ TH·ªêNG
 */
async function initializeConfig() {
  console.log('üöÄ ƒêang kh·ªüi t·∫°o c·∫•u h√¨nh h·ªá th·ªëng...');
  
  // üîπ KI·ªÇM TRA C·∫§U H√åNH TR∆Ø·ªöC KHI S·ª¨ D·ª§NG
  validateConfig();

  // üîπ K·∫æT N·ªêI DATABASE
  await connectDatabase();

  // üîπ LOG TH√îNG TIN C·∫§U H√åNH (·∫®N TH√îNG TIN NH·∫†Y C·∫¢M)
  console.log(`üåç M√¥i tr∆∞·ªùng: ${appConfig.env}`);
  console.log(`üß© JWT Expiry: Access ${appConfig.jwt.accessExpiry} | Refresh ${appConfig.jwt.refreshExpiry}`);
  console.log(`üì° SMTP Host: ${appConfig.email.smtpHost}`);
  console.log(`üìä Log Level: ${appConfig.logging.level}`);
  
  // üîπ KI·ªÇM TRA SUPER ADMIN CONFIG
  if (appConfig.superAdmin) {
    console.log(`üëë Super Admin: ${appConfig.superAdmin.email}`);
    
    // üîπ KI·ªÇM TRA TR·∫†NG TH√ÅI SUPER ADMIN
    try {
      const adminStatus = await superAdminService.getSuperAdminStatus();
      console.log(`üîê Super Admin Status: ${adminStatus.exists ? 'ACTIVE' : 'INACTIVE'}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i Super Admin:', error.message);
    }
  } else {
    console.warn('‚ö†Ô∏è C·∫•u h√¨nh Super Admin kh√¥ng t·ªìn t·∫°i');
  }

  console.log('‚úÖ Kh·ªüi t·∫°o c·∫•u h√¨nh ho√†n t·∫•t');
}

/**
 * KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ C·ª¶A C·∫§U H√åNH
 */
function validateConfig() {
  const requiredFields = [
    'env', 'port', 'db', 'jwt', 'security', 
    'email', 'cors', 'logging'
  ];

  requiredFields.forEach(field => {
    if (!appConfig[field]) {
      throw new Error(`‚ùå Thi·∫øu c·∫•u h√¨nh b·∫Øt bu·ªôc: ${field}`);
    }
  });

  // Ki·ªÉm tra superAdmin config
  if (!appConfig.superAdmin) {
    console.warn('‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Super Admin');
  }
}

module.exports = {
  appConfig,
  connectDatabase,
  initializeConfig,
  validateConfig
};