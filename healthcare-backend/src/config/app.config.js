// src/config/app.config.js
const dotenv = require('dotenv');
const path = require('path');
const Joi = require('joi');

/**
 * C·∫§U H√åNH ·ª®NG D·ª§NG CH√çNH
 * - Load v√† validate bi·∫øn m√¥i tr∆∞·ªùng
 * - Cung c·∫•p c·∫•u h√¨nh th·ªëng nh·∫•t cho to√†n b·ªô ·ª©ng d·ª•ng
 */

// üîπ Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

/**
 * SCHEMA VALIDATION CHO BI·∫æN M√îI TR∆Ø·ªúNG
 * ƒê·∫£m b·∫£o t·∫•t c·∫£ bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt ƒë∆∞·ª£c khai b√°o v√† h·ª£p l·ªá
 */
const envSchema = Joi.object({
  // M√îI TR∆Ø·ªúNG ·ª®NG D·ª§NG
  NODE_ENV: Joi.string()
    .valid('development', 'production', 'test')
    .default('development'),

  // C·∫§U H√åNH SERVER
  PORT: Joi.number().default(5000),

  // C∆† S·ªû D·ªÆ LI·ªÜU
  MONGO_URI: Joi.string().uri().required(),

  // JWT TOKEN
  JWT_ACCESS_SECRET: Joi.string().required(),
  JWT_REFRESH_SECRET: Joi.string().required(),
  ACCESS_TOKEN_EXPIRES_IN: Joi.string().default('15m'),
  REFRESH_TOKEN_EXPIRES_IN: Joi.string().default('7d'),

  // B·∫¢O M·∫¨T
  SALT_ROUNDS: Joi.number().default(12),

  // EMAIL SERVICE
  EMAIL_FROM: Joi.string().email().required(),
  SMTP_HOST: Joi.string().required(),
  SMTP_PORT: Joi.number().default(587),
  SMTP_USER: Joi.string().required(),
  SMTP_PASS: Joi.string().required(),

  // CORS & SECURITY
  CORS_ORIGIN: Joi.string().default('*'),
  CSRF_COOKIE_NAME: Joi.string().default('XSRF-TOKEN'),
  MAX_LOGIN_ATTEMPTS: Joi.number().default(5),
  LOCK_TIME: Joi.string().default('15m'),

  // SUPER ADMIN ACCOUNT
  SUPER_ADMIN_EMAIL: Joi.string().email().required(),
  SUPER_ADMIN_PASSWORD: Joi.string().required(),
  SUPER_ADMIN_NAME: Joi.string().default('System Root Admin'),

  // LOGGING & AUDIT
  LOG_LEVEL: Joi.string()
    .valid('error', 'warn', 'info', 'debug', 'trace')
    .default('info'),
  ENABLE_AUDIT_LOG: Joi.boolean().default(true),
  AUDIT_LOG_RETENTION_DAYS: Joi.number().default(90),
}).unknown(true); // Cho ph√©p c√°c bi·∫øn m√¥i tr∆∞·ªùng ph·ª• kh√¥ng x√°c ƒë·ªãnh

/**
 * VALIDATE V√Ä X·ª¨ L√ù L·ªñI C·∫§U H√åNH
 */
const { value: env, error } = envSchema.validate(process.env, {
  abortEarly: false,  // Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªói, kh√¥ng d·ª´ng ·ªü l·ªói ƒë·∫ßu ti√™n
  allowUnknown: true, // Cho ph√©p bi·∫øn kh√¥ng x√°c ƒë·ªãnh
  stripUnknown: true, // Lo·∫°i b·ªè bi·∫øn kh√¥ng x√°c ƒë·ªãnh
});

// üî¥ THO√ÅT ·ª®NG D·ª§NG N·∫æU C·∫§U H√åNH KH√îNG H·ª¢P L·ªÜ
if (error) {
  console.error('‚ùå C·∫•u h√¨nh m√¥i tr∆∞·ªùng kh√¥ng h·ª£p l·ªá:\n');
  error.details.forEach((err) => console.error(`- ${err.message}`));
  process.exit(1);
}

/**
 * ƒê·ªêI T∆Ø·ª¢NG C·∫§U H√åNH CHU·∫®N H√ìA
 * T·ªï ch·ª©c c·∫•u h√¨nh theo nh√≥m logic ƒë·ªÉ d·ªÖ qu·∫£n l√Ω
 */
const appConfig = {
  // TH√îNG TIN M√îI TR∆Ø·ªúNG
  env: env.NODE_ENV,
  isDev: env.NODE_ENV === 'development',
  isProd: env.NODE_ENV === 'production',
  port: env.PORT,

  // C∆† S·ªû D·ªÆ LI·ªÜU
  db: {
    uri: env.MONGO_URI,
  },

  // JWT & AUTHENTICATION
  jwt: {
    accessSecret: env.JWT_ACCESS_SECRET,
    refreshSecret: env.JWT_REFRESH_SECRET,
    accessExpiry: env.ACCESS_TOKEN_EXPIRES_IN,
    refreshExpiry: env.REFRESH_TOKEN_EXPIRES_IN,
  },

  // CORS CONFIGURATION
  cors: {
    origin: env.CORS_ORIGIN,
  },

  // EMAIL SERVICE
  email: {
    from: env.EMAIL_FROM,
    smtpHost: env.SMTP_HOST,
    smtpPort: env.SMTP_PORT,
    smtpUser: env.SMTP_USER,
    smtpPass: env.SMTP_PASS,
  },

  // B·∫¢O M·∫¨T
  security: {
    saltRounds: env.SALT_ROUNDS,
    csrfCookieName: env.CSRF_COOKIE_NAME,
    maxLoginAttempts: env.MAX_LOGIN_ATTEMPTS,
    lockTime: env.LOCK_TIME,
  },

  // T√ÄI KHO·∫¢N SUPER ADMIN
  superAdmin: {
    email: env.SUPER_ADMIN_EMAIL,
    password: env.SUPER_ADMIN_PASSWORD,
    name: env.SUPER_ADMIN_NAME,
  },

  // LOGGING & AUDIT TRAIL
  logging: {
    level: env.LOG_LEVEL,
    enableAudit: env.ENABLE_AUDIT_LOG,
    retentionDays: env.AUDIT_LOG_RETENTION_DAYS,
  },
};

module.exports = {
  ...appConfig,
  config: appConfig, // Export c·∫£ d·∫°ng spread v√† nested object
};