// src/config/db.config.js
const mongoose = require('mongoose');
const appConfig = require('./app.config');

async function connectDatabase(retryCount = 0) {
  const MAX_RETRIES = 5;
  const RETRY_DELAY = 5000;

  try {
    mongoose.set('strictQuery', true);

    await mongoose.connect(appConfig.db.uri, {
      maxPoolSize: appConfig.db.maxPoolSize,
      minPoolSize: appConfig.db.minPoolSize,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      autoIndex: appConfig.isDev,
    });

    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
  } catch (err) {
    console.error(`‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i (${retryCount + 1}/${MAX_RETRIES}):`, err.message);

    if (retryCount < MAX_RETRIES) {
      console.log(`üîÅ Th·ª≠ l·∫°i k·∫øt n·ªëi sau ${RETRY_DELAY / 1000} gi√¢y...`);
      await new Promise((resolve) => setTimeout(resolve, RETRY_DELAY));
      return connectDatabase(retryCount + 1);
    } else {
      console.error('‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa. Tho√°t ·ª©ng d·ª•ng...');
      process.exit(1);
    }
  }

  mongoose.connection.on('disconnected', () => {
    console.warn('‚ö†Ô∏è MongoDB ƒë√£ ng·∫Øt k·∫øt n·ªëi. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');
  });

  mongoose.connection.on('reconnected', () => {
    console.log('üîÑ ƒê√£ k·∫øt n·ªëi l·∫°i MongoDB th√†nh c√¥ng');
  });

  mongoose.connection.on('error', (err) => {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err.message);
  });
}

module.exports = connectDatabase;
