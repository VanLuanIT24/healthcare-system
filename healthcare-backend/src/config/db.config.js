// src/config/db.config.js
const mongoose = require('mongoose');
const appConfig = require('./app.config');

/**
 * K·∫æT N·ªêI C∆† S·ªû D·ªÆ LI·ªÜU MONGODB
 * - T·ª± ƒë·ªông retry khi k·∫øt n·ªëi th·∫•t b·∫°i
 * - X·ª≠ l√Ω s·ª± ki·ªán k·∫øt n·ªëi v√† ng·∫Øt k·∫øt n·ªëi
 * 
 * @param {number} retryCount - S·ªë l·∫ßn th·ª≠ l·∫°i hi·ªán t·∫°i
 * @returns {Promise<void>}
 */
async function connectDatabase(retryCount = 0) {
  const MAX_RETRIES = 5; // S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
  const RETRY_DELAY = 5000; // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠ (ms)

  try {
    // üîπ C·∫§U H√åNH MONGOOSE
    mongoose.set('strictQuery', true); // Tr√°nh c·∫£nh b√°o deprecation
    
    // üîπ THI·∫æT L·∫¨P K·∫æT N·ªêI
    await mongoose.connect(appConfig.db.uri, {
      maxPoolSize: 20,           // S·ªë k·∫øt n·ªëi t·ªëi ƒëa trong pool
      minPoolSize: 5,            // S·ªë k·∫øt n·ªëi t·ªëi thi·ªÉu trong pool
      serverSelectionTimeoutMS: 5000, // Timeout ch·ªçn server
      socketTimeoutMS: 45000,    // Timeout socket
      autoIndex: appConfig.env === 'development', // Ch·ªâ t·∫°o index trong development
    });

    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');

  } catch (err) {
    console.error(`‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i (${retryCount + 1}/${MAX_RETRIES}):`, err.message);

    // üîÑ TH·ª¨ L·∫†I K·∫æT N·ªêI N·∫æU CH∆ØA V∆Ø·ª¢T QU√Å S·ªê L·∫¶N CHO PH√âP
    if (retryCount < MAX_RETRIES) {
      console.log(`üîÅ Th·ª≠ l·∫°i k·∫øt n·ªëi sau ${RETRY_DELAY/1000} gi√¢y...`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return connectDatabase(retryCount + 1);
    } else {
      // üî¥ THO√ÅT ·ª®NG D·ª§NG N·∫æU KH√îNG TH·ªÇ K·∫æT N·ªêI
      console.error('‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa. Tho√°t ·ª©ng d·ª•ng...');
      process.exit(1);
    }
  }

  // üéØ X·ª¨ L√ù S·ª∞ KI·ªÜN K·∫æT N·ªêI MONGODB
  mongoose.connection.on('disconnected', () => {
    console.warn('‚ö†Ô∏è MongoDB ƒë√£ ng·∫Øt k·∫øt n·ªëi. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');
  });

  mongoose.connection.on('reconnected', () => {
    console.log('üîÑ ƒê√£ k·∫øt n·ªëi l·∫°i MongoDB th√†nh c√¥ng');
  });

  mongoose.connection.on('error', (err) => {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err.message);
  });
}

module.exports = connectDatabase;