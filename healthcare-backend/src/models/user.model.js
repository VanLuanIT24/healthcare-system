// src/models/user.model.js
const mongoose = require('mongoose');

/**
 * SCHEMA X√ÅC TH·ª∞C 2 Y·∫æU T·ªê (2FA)
 */
const TwoFASchema = new mongoose.Schema({
  enabled: { 
    type: Boolean, 
    default: false 
  },
  secret: { 
    type: String, 
    default: null // L∆∞u secret key base32 cho TOTP
  },
});

/**
 * SCHEMA NG∆Ø·ªúI D√ôNG CH√çNH
 */
const UserSchema = new mongoose.Schema({
  // TH√îNG TIN ƒêƒÇNG NH·∫¨P
  email: { 
    type: String, 
    unique: true, 
    index: true, 
    required: true,
    lowercase: true, // Chu·∫©n h√≥a email
    trim: true
  },
  
  name: { 
    type: String, 
    required: true 
  },
  
  // M·∫¨T KH·∫®U ƒê√É M√É H√ìA
  passwordHash: { 
    type: String, 
    required: true 
  },
  
  // VAI TR√í TRONG H·ªÜ TH·ªêNG
  role: { 
    type: String, 
    required: true, 
    default: 'PATIENT',
    index: true
  },
  
  // DANH S√ÅCH QUY·ªÄN ƒê∆Ø·ª¢C T·∫†O USER
  canCreate: { 
    type: [String], 
    default: [] 
  },
  
  // TR·∫†NG TH√ÅI T√ÄI KHO·∫¢N
  status: { 
    type: String, 
    enum: ['PENDING_VERIFICATION', 'ACTIVE', 'LOCKED', 'DEACTIVATED'], 
    default: 'PENDING_VERIFICATION',
    index: true
  },
  
  // NG∆Ø·ªúI T·∫†O T√ÄI KHO·∫¢N (n·∫øu c√≥)
  createdBy: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'User', 
    default: null 
  },
  
  // B·∫¢O M·∫¨T ƒêƒÇNG NH·∫¨P
  failedLoginAttempts: { 
    type: Number, 
    default: 0 
  },
  lockUntil: { 
    type: Date, 
    default: null 
  },
  
  // X√ÅC TH·ª∞C 2 Y·∫æU T·ªê
  twoFA: { 
    type: TwoFASchema, 
    default: () => ({}) 
  },
  
  // TH√îNG TIN ƒêƒÇNG NH·∫¨P CU·ªêI
  lastLogin: {
    ip: String,
    userAgent: String,
    at: Date
  },
  
  // TH√îNG TIN B·ªî SUNG
  meta: { 
    type: Object, 
    default: {} 
  }
}, { 
  timestamps: true // T·ª± ƒë·ªông th√™m createdAt, updatedAt
});

/**
 * VIRTUAL FIELD: KI·ªÇM TRA T√ÄI KHO·∫¢N C√ì ƒêANG B·ªä KH√ìA
 */
UserSchema.virtual('isLocked').get(function() {
  return !!(this.lockUntil && this.lockUntil > Date.now());
});

/**
 * MIDDLEWARE TR∆Ø·ªöC KHI L∆ØU
 */
UserSchema.pre('save', function(next) {
  // Chu·∫©n h√≥a email tr∆∞·ªõc khi l∆∞u
  if (this.email) {
    this.email = this.email.toLowerCase().trim();
  }
  next();
});

// üîπ T·∫†O INDEX CHO TRUY V·∫§N HI·ªÜU QU·∫¢
UserSchema.index({ email: 1 });
UserSchema.index({ role: 1, status: 1 });
UserSchema.index({ createdAt: -1 });

module.exports = mongoose.model('User', UserSchema);