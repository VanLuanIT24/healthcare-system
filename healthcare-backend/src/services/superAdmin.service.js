// src/services/superAdmin.service.js
const bcrypt = require('bcrypt');
const { appConfig } = require('../config');
const User = require('../models/user.model');
const AuditLog = require('../models/auditLog.model');
const { ROLES } = require('../constants/roles');

class SuperAdminService {
  /**
   * KI·ªÇM TRA V√Ä L·∫§Y C·∫§U H√åNH SUPER ADMIN
   */
  getSuperAdminConfig() {
    if (!appConfig.superAdmin || !appConfig.superAdmin.email) {
      throw new Error('C·∫•u h√¨nh Super Admin kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá');
    }
    return appConfig.superAdmin;
  }

  /**
   * T·∫†O SUPER ADMIN M·ªöI
   */
  async createNewSuperAdmin() {
    const superAdminConfig = this.getSuperAdminConfig();
    const { email, password, name } = superAdminConfig;

    // M√£ h√≥a m·∫≠t kh·∫©u
    const passwordHash = await bcrypt.hash(password, appConfig.security.saltRounds);

    // T√°ch t√™n th√†nh firstName v√† lastName
    const nameParts = name.split(' ');
    const firstName = nameParts[0] || 'Super';
    const lastName = nameParts.slice(1).join(' ') || 'Admin';

    // T·∫°o Super Admin v·ªõi schema th·ª±c t·∫ø t·ª´ MongoDB
    const superAdmin = new User({
      email: email.toLowerCase(),
      name: name || 'System Root Administrator',
      password: password,
      passwordHash,
      role: ROLES.SUPER_ADMIN,
      isActive: true,
      loginAttempts: 0,
      
      // Th√¥ng tin c√° nh√¢n theo schema th·ª±c t·∫ø
      personalInfo: {
        firstName: firstName,
        lastName: lastName,
        gender: 'OTHER',
        dateOfBirth: new Date('1980-01-01'),
        phone: appConfig.superAdmin.phone || '+84123456789'
      },
      
      // Th√¥ng tin chuy√™n m√¥n
      professionalInfo: {
        qualifications: []
      },
      
      // C√†i ƒë·∫∑t
      settings: {
        notifications: {
          email: true,
          sms: false,
          push: true
        },
        language: 'vi',
        theme: 'light'
      },
      
      documents: [],
      
      // Th√¥ng tin h·ªá th·ªëng
      systemInfo: {
        isSuperAdmin: true,
        createdBy: 'SYSTEM',
        initializationDate: new Date()
      },

      canCreate: Object.keys(ROLES),
      meta: {
        systemGenerated: true,
        initializedAt: new Date(),
        version: '1.0'
      }
    });

    await superAdmin.save();

    // Ghi log audit v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    await this.logSuperAdminAction('SYSTEM_INIT', null, superAdmin._id, {
      action: 'CREATE_SUPER_ADMIN',
      source: 'SYSTEM_BOOTSTRAP'
    });

    console.log('üéâ ƒê√£ t·∫°o t√†i kho·∫£n Super Admin th√†nh c√¥ng!');
    this.logSuperAdminCredentials(superAdmin, superAdminConfig);

    // Tr·∫£ v·ªÅ object v·ªõi c√°c tr∆∞·ªùng c·∫ßn thi·∫øt cho CLI
    return {
      ...superAdmin.toObject(),
      status: superAdmin.isActive ? 'ACTIVE' : 'INACTIVE' // Th√™m tr∆∞·ªùng status cho CLI
    };
  }

  /**
   * C·∫¨P NH·∫¨T SUPER ADMIN HI·ªÜN C√ì
   */
  async updateExistingSuperAdmin(existingAdmin) {
    const superAdminConfig = this.getSuperAdminConfig();
    const { password, name } = superAdminConfig;

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u n·∫øu c√≥ thay ƒë·ªïi
    const isPasswordMatch = await bcrypt.compare(password, existingAdmin.passwordHash);
    
    if (!isPasswordMatch) {
      existingAdmin.passwordHash = await bcrypt.hash(password, appConfig.security.saltRounds);
      existingAdmin.password = password;
      console.log('üîí ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u Super Admin');
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    existingAdmin.name = name || 'System Root Administrator';
    existingAdmin.isActive = true;
    existingAdmin.canCreate = Object.keys(ROLES);
    existingAdmin.meta = {
      ...existingAdmin.meta,
      lastUpdated: new Date(),
      updatedBy: 'SYSTEM'
    };

    await existingAdmin.save();

    await this.logSuperAdminAction('SYSTEM_UPDATE', existingAdmin._id, existingAdmin._id, {
      action: 'UPDATE_SUPER_ADMIN',
      changes: ['password', 'name', 'permissions']
    });

    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin Super Admin');
    
    // Tr·∫£ v·ªÅ object v·ªõi c√°c tr∆∞·ªùng c·∫ßn thi·∫øt cho CLI
    return {
      ...existingAdmin.toObject(),
      status: existingAdmin.isActive ? 'ACTIVE' : 'INACTIVE' // Th√™m tr∆∞·ªùng status cho CLI
    };
  }

  /**
   * KH·ªûI T·∫†O SUPER ADMIN T·ª∞ ƒê·ªòNG
   */
  async initializeSuperAdmin() {
    try {
      console.log('üîç ƒêang ki·ªÉm tra t√†i kho·∫£n Super Admin...');

      const superAdminConfig = this.getSuperAdminConfig();

      // Ki·ªÉm tra Super Admin ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingSuperAdmin = await User.findOne({ 
        role: ROLES.SUPER_ADMIN,
        email: superAdminConfig.email
      });

      if (existingSuperAdmin) {
        console.log('‚úÖ Super Admin ƒë√£ t·ªìn t·∫°i, ƒëang c·∫≠p nh·∫≠t th√¥ng tin...');
        return await this.updateExistingSuperAdmin(existingSuperAdmin);
      }

      // T·∫°o m·ªõi Super Admin
      return await this.createNewSuperAdmin();
      
    } catch (error) {
      console.error('‚ùå L·ªói kh·ªüi t·∫°o Super Admin:', error);
      throw error;
    }
  }

  /**
   * KI·ªÇM TRA TR·∫†NG TH√ÅI SUPER ADMIN
   */
  async getSuperAdminStatus() {
    try {
      const superAdminConfig = this.getSuperAdminConfig();
      
      const superAdmin = await User.findOne({ 
        role: ROLES.SUPER_ADMIN,
        email: superAdminConfig.email
      });

      if (!superAdmin) {
        return { 
          exists: false, 
          status: 'NOT_FOUND',
          configExists: true
        };
      }

      return {
        exists: true,
        status: superAdmin.isActive ? 'ACTIVE' : 'INACTIVE',
        email: superAdmin.email,
        name: superAdmin.name,
        role: superAdmin.role,
        personalInfo: superAdmin.personalInfo,
        lastLogin: superAdmin.lastLogin,
        createdAt: superAdmin.createdAt,
        configExists: true
      };
    } catch (error) {
      return {
        exists: false,
        status: 'CONFIG_ERROR',
        configExists: false,
        error: error.message
      };
    }
  }

  /**
   * RESET SUPER ADMIN (FOR DEVELOPMENT/TESTING)
   */
  async resetSuperAdmin() {
    if (appConfig.isProd) {
      throw new Error('Kh√¥ng th·ªÉ reset Super Admin trong m√¥i tr∆∞·ªùng production');
    }

    console.log('üîÑ ƒêang reset Super Admin...');
    
    const superAdminConfig = this.getSuperAdminConfig();

    // X√≥a Super Admin hi·ªán t·∫°i
    await User.deleteOne({ 
      role: ROLES.SUPER_ADMIN,
      email: superAdminConfig.email
    });

    // T·∫°o l·∫°i
    return await this.createNewSuperAdmin();
  }

  /**
   * GHI LOG AUDIT CHO H√ÄNH ƒê·ªòNG SUPER ADMIN
   */
  async logSuperAdminAction(action, targetUserId, actorId, meta = {}) {
    if (!appConfig.logging.enableAudit) return;

    try {
      const auditLog = new AuditLog({
        actor: actorId,
        action,
        target: targetUserId,
        ipAddress: '127.0.0.1',
        userAgent: 'System-Bootstrap',
        resource: 'SUPER_ADMIN',
        userRole: ROLES.SUPER_ADMIN,
        meta: {
          ...meta,
          systemAction: true,
          environment: appConfig.env
        }
      });

      await auditLog.save();
    } catch (error) {
      console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ ghi audit log:', error.message);
    }
  }

  /**
   * LOG TH√îNG TIN ƒêƒÇNG NH·∫¨P (CH·ªà HI·ªÇN TH·ªä TRONG DEVELOPMENT)
   */
  logSuperAdminCredentials(superAdmin, superAdminConfig) {
    if (appConfig.isDev) {
      console.log('\nüìã TH√îNG TIN SUPER ADMIN (CH·ªà HI·ªÇN TH·ªä TRONG DEVELOPMENT)');
      console.log('========================================');
      console.log(`üìß Email: ${superAdmin.email}`);
      console.log(`üîë Password: ${superAdminConfig.password}`);
      console.log(`üë§ Name: ${superAdmin.name}`);
      console.log(`üë• Full Name: ${superAdmin.personalInfo.firstName} ${superAdmin.personalInfo.lastName}`);
      console.log(`üéØ Role: ${superAdmin.role}`);
      console.log(`üìä Status: ${superAdmin.isActive ? 'ACTIVE' : 'INACTIVE'}`);
      console.log('========================================\n');
    } else {
      console.log('‚úÖ Super Admin ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
    }
  }
}

module.exports = new SuperAdminService();