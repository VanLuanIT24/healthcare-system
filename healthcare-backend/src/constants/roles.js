// src/constants/roles.js
/**
 * üåê H·ªÜ TH·ªêNG PH√ÇN QUY·ªÄN RBAC CHU·∫®N HEALTHCARE ENTERPRISE
 * Author: Senior Dev Team (Healthcare Edition)
 * Description:
 *  - Thi·∫øt k·∫ø chuy√™n bi·ªát cho h·ªá th·ªëng y t·∫ø
 *  - H·ªó tr·ª£ ƒëa d·∫°ng vai tr√≤ v√† quy·ªÅn h·∫°n theo chu·∫©n b·ªánh vi·ªán
 *  - B·∫£o m·∫≠t d·ªØ li·ªáu b·ªánh nh√¢n theo HIPAA v√† c√°c ti√™u chu·∫©n y t·∫ø
 */

const ROLES = Object.freeze({
  // ===== H·ªÜ TH·ªêNG =====
  SUPER_ADMIN: 'SUPER_ADMIN',        // To√†n quy·ªÅn h·ªá th·ªëng (IT System Admin)
  
  // ===== QU·∫¢N TR·ªä =====
  HOSPITAL_ADMIN: 'HOSPITAL_ADMIN',  // Qu·∫£n tr·ªã b·ªánh vi·ªán
  DEPARTMENT_HEAD: 'DEPARTMENT_HEAD', // Tr∆∞·ªüng khoa/ph√≤ng
  
  // ===== Y B√ÅC Sƒ® =====
  DOCTOR: 'DOCTOR',                  // B√°c sƒ© ƒëi·ªÅu tr·ªã
  NURSE: 'NURSE',                    // Y t√°/ƒêi·ªÅu d∆∞·ª°ng
  PHARMACIST: 'PHARMACIST',          // D∆∞·ª£c sƒ©
  LAB_TECHNICIAN: 'LAB_TECHNICIAN',  // K·ªπ thu·∫≠t vi√™n x√©t nghi·ªám
  
  // ===== H√ÄNH CH√çNH =====
  RECEPTIONIST: 'RECEPTIONIST',      // L·ªÖ t√¢n
  BILLING_STAFF: 'BILLING_STAFF',    // Nh√¢n vi√™n k·∫ø to√°n
  
  // ===== NG∆Ø·ªúI D√ôNG =====
  PATIENT: 'PATIENT',                // B·ªánh nh√¢n
  GUEST: 'GUEST',                    // Kh√°ch (ch∆∞a ƒëƒÉng nh·∫≠p)
});

const PERMISSIONS = Object.freeze({
  // ===== AUTHENTICATION & C∆† B·∫¢N =====
  LOGIN: 'AUTH.LOGIN',
  LOGOUT: 'AUTH.LOGOUT',
  SELF_REGISTER: 'AUTH.SELF_REGISTER',
  
  // ===== ƒêƒÇNG K√ù T√ÄI KHO·∫¢N =====
  REGISTER_PATIENT: 'AUTH.REGISTER_PATIENT',
  REGISTER_RECEPTIONIST: 'AUTH.REGISTER_RECEPTIONIST',
  REGISTER_BILLING_STAFF: 'AUTH.REGISTER_BILLING_STAFF',
  REGISTER_LAB_TECHNICIAN: 'AUTH.REGISTER_LAB_TECHNICIAN',
  REGISTER_PHARMACIST: 'AUTH.REGISTER_PHARMACIST',
  REGISTER_NURSE: 'AUTH.REGISTER_NURSE',
  REGISTER_DOCTOR: 'AUTH.REGISTER_DOCTOR',
  REGISTER_DEPARTMENT_HEAD: 'AUTH.REGISTER_DEPARTMENT_HEAD',
  REGISTER_HOSPITAL_ADMIN: 'AUTH.REGISTER_HOSPITAL_ADMIN',

  // ===== QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG =====
  VIEW_USER: 'USER.VIEW',
  UPDATE_USER: 'USER.UPDATE',
  DISABLE_USER: 'USER.DISABLE',
  DELETE_USER: 'USER.DELETE',
  VIEW_USER_SENSITIVE: 'USER.VIEW_SENSITIVE', // Xem th√¥ng tin nh·∫°y c·∫£m
  ENABLE_USER: 'USER.ENABLE', // K√≠ch ho·∫°t l·∫°i user
  RESTORE_USER: 'USER.RESTORE', // Kh√¥i ph·ª•c user ƒë√£ x√≥a

  // ===== H·ªí S∆† B·ªÜNH √ÅN ===== (Quan tr·ªçng nh·∫•t)
  VIEW_MEDICAL_RECORDS: 'MEDICAL.VIEW_RECORDS',
  CREATE_MEDICAL_RECORDS: 'MEDICAL.CREATE_RECORDS',
  UPDATE_MEDICAL_RECORDS: 'MEDICAL.UPDATE_RECORDS',
  DELETE_MEDICAL_RECORDS: 'MEDICAL.DELETE_RECORDS',
  EXPORT_MEDICAL_RECORDS: 'MEDICAL.EXPORT_RECORDS',
  
  // ===== CH·∫®N ƒêO√ÅN & ƒêI·ªÄU TR·ªä =====
  CREATE_DIAGNOSIS: 'MEDICAL.CREATE_DIAGNOSIS',
  UPDATE_DIAGNOSIS: 'MEDICAL.UPDATE_DIAGNOSIS',
  VIEW_TREATMENT_PLANS: 'MEDICAL.VIEW_TREATMENT_PLANS',
  CREATE_TREATMENT_PLANS: 'MEDICAL.CREATE_TREATMENT_PLANS',
  UPDATE_TREATMENT_PLANS: 'MEDICAL.UPDATE_TREATMENT_PLANS',

  // ===== ƒê∆†N THU·ªêC =====
  VIEW_PRESCRIPTIONS: 'PRESCRIPTION.VIEW',
  CREATE_PRESCRIPTIONS: 'PRESCRIPTION.CREATE',
  UPDATE_PRESCRIPTIONS: 'PRESCRIPTION.UPDATE',
  DISPENSE_MEDICATION: 'PRESCRIPTION.DISPENSE', // Ph√°t thu·ªëc

  // ===== L·ªäCH H·∫∏N =====
  VIEW_APPOINTMENTS: 'APPOINTMENT.VIEW',
  CREATE_APPOINTMENTS: 'APPOINTMENT.CREATE',
  UPDATE_APPOINTMENTS: 'APPOINTMENT.UPDATE',
  CANCEL_APPOINTMENTS: 'APPOINTMENT.CANCEL',
  VIEW_SCHEDULE: 'APPOINTMENT.VIEW_SCHEDULE', // L·ªãch l√†m vi·ªác

  // ===== X√âT NGHI·ªÜM & C·∫¨N L√ÇM S√ÄNG =====
  VIEW_LAB_RESULTS: 'LAB.VIEW_RESULTS',
  CREATE_LAB_RESULTS: 'LAB.CREATE_RESULTS',
  UPDATE_LAB_RESULTS: 'LAB.UPDATE_RESULTS',
  APPROVE_LAB_RESULTS: 'LAB.APPROVE_RESULTS',

  // ===== THANH TO√ÅN & H√ìA ƒê∆†N =====
  VIEW_BILLS: 'BILL.VIEW',
  CREATE_BILLS: 'BILL.CREATE',
  UPDATE_BILLS: 'BILL.UPDATE',
  PROCESS_PAYMENTS: 'BILL.PROCESS_PAYMENTS',
  VIEW_FINANCIAL_REPORTS: 'BILL.VIEW_REPORTS',

  // ===== QU·∫¢N L√ù KHO =====
  VIEW_INVENTORY: 'INVENTORY.VIEW',
  UPDATE_INVENTORY: 'INVENTORY.UPDATE',
  MANAGE_MEDICATION_STOCK: 'INVENTORY.MANAGE_MEDICATION',

  // ===== B√ÅO C√ÅO & TH·ªêNG K√ä =====
  VIEW_REPORTS: 'REPORT.VIEW',
  GENERATE_REPORTS: 'REPORT.GENERATE',
  EXPORT_REPORTS: 'REPORT.EXPORT',

  // ===== QUY·ªÄN KH·∫®N C·∫§P ===== (Y t·∫ø ƒë·∫∑c th√π)
  EMERGENCY_ACCESS: 'EMERGENCY.ACCESS', // Truy c·∫≠p kh·∫©n trong t√¨nh hu·ªëng c·∫•p c·ª©u
  BYPASS_APPROVAL: 'EMERGENCY.BYPASS_APPROVAL',

  // ===== H·ªÜ TH·ªêNG =====
  SYSTEM_CONFIG: 'SYSTEM.CONFIG',
  AUDIT_LOG_VIEW: 'SYSTEM.VIEW_AUDIT_LOG',
  BACKUP_DATA: 'SYSTEM.BACKUP_DATA',
  RESTORE_DATA: 'SYSTEM.RESTORE_DATA',
});

/**
 * üéØ PH√ÇN QUY·ªÄN CHI TI·∫æT THEO VAI TR√í
 * - M·ªói role c√≥ t·∫≠p permissions ph√π h·ª£p v·ªõi c√¥ng vi·ªác
 * - Tu√¢n th·ªß nguy√™n t·∫Øc "least privilege" trong b·∫£o m·∫≠t y t·∫ø
 */
const ROLE_PERMISSIONS = Object.freeze({
  [ROLES.SUPER_ADMIN]: [
    // To√†n quy·ªÅn h·ªá th·ªëng
    ...Object.values(PERMISSIONS)
  ],

  [ROLES.HOSPITAL_ADMIN]: [
    // Qu·∫£n tr·ªã b·ªánh vi·ªán
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.REGISTER_DEPARTMENT_HEAD, PERMISSIONS.REGISTER_DOCTOR,
    PERMISSIONS.REGISTER_NURSE, PERMISSIONS.REGISTER_PHARMACIST,
    PERMISSIONS.REGISTER_LAB_TECHNICIAN, PERMISSIONS.REGISTER_BILLING_STAFF,
    PERMISSIONS.REGISTER_RECEPTIONIST, PERMISSIONS.REGISTER_PATIENT,
    PERMISSIONS.VIEW_USER, PERMISSIONS.UPDATE_USER, PERMISSIONS.DISABLE_USER,
    PERMISSIONS.DELETE_USER, PERMISSIONS.ENABLE_USER, PERMISSIONS.RESTORE_USER,
    PERMISSIONS.VIEW_USER_SENSITIVE,
    PERMISSIONS.VIEW_MEDICAL_RECORDS, PERMISSIONS.EXPORT_MEDICAL_RECORDS,
    PERMISSIONS.VIEW_APPOINTMENTS, PERMISSIONS.VIEW_SCHEDULE,
    PERMISSIONS.VIEW_LAB_RESULTS, PERMISSIONS.VIEW_BILLS,
    PERMISSIONS.VIEW_FINANCIAL_REPORTS, PERMISSIONS.VIEW_REPORTS,
    PERMISSIONS.GENERATE_REPORTS, PERMISSIONS.EXPORT_REPORTS,
    PERMISSIONS.EMERGENCY_ACCESS, PERMISSIONS.AUDIT_LOG_VIEW,
    PERMISSIONS.SYSTEM_CONFIG, PERMISSIONS.BACKUP_DATA,
  ],

  [ROLES.DEPARTMENT_HEAD]: [
    // Tr∆∞·ªüng khoa
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.REGISTER_DOCTOR, PERMISSIONS.REGISTER_NURSE,
    PERMISSIONS.REGISTER_LAB_TECHNICIAN,
    PERMISSIONS.VIEW_USER, PERMISSIONS.UPDATE_USER, PERMISSIONS.ENABLE_USER,
    PERMISSIONS.VIEW_MEDICAL_RECORDS, PERMISSIONS.CREATE_MEDICAL_RECORDS,
    PERMISSIONS.UPDATE_MEDICAL_RECORDS, PERMISSIONS.EXPORT_MEDICAL_RECORDS,
    PERMISSIONS.CREATE_DIAGNOSIS, PERMISSIONS.UPDATE_DIAGNOSIS,
    PERMISSIONS.VIEW_TREATMENT_PLANS, PERMISSIONS.CREATE_TREATMENT_PLANS,
    PERMISSIONS.UPDATE_TREATMENT_PLANS,
    PERMISSIONS.VIEW_PRESCRIPTIONS, PERMISSIONS.CREATE_PRESCRIPTIONS,
    PERMISSIONS.VIEW_APPOINTMENTS, PERMISSIONS.CREATE_APPOINTMENTS,
    PERMISSIONS.UPDATE_APPOINTMENTS, PERMISSIONS.VIEW_SCHEDULE,
    PERMISSIONS.VIEW_LAB_RESULTS, PERMISSIONS.APPROVE_LAB_RESULTS,
    PERMISSIONS.VIEW_REPORTS, PERMISSIONS.GENERATE_REPORTS,
    PERMISSIONS.EMERGENCY_ACCESS,
  ],

  [ROLES.DOCTOR]: [
    // B√°c sƒ© ƒëi·ªÅu tr·ªã
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.VIEW_USER,
    PERMISSIONS.VIEW_MEDICAL_RECORDS, PERMISSIONS.CREATE_MEDICAL_RECORDS,
    PERMISSIONS.UPDATE_MEDICAL_RECORDS,
    PERMISSIONS.CREATE_DIAGNOSIS, PERMISSIONS.UPDATE_DIAGNOSIS,
    PERMISSIONS.VIEW_TREATMENT_PLANS, PERMISSIONS.CREATE_TREATMENT_PLANS,
    PERMISSIONS.UPDATE_TREATMENT_PLANS,
    PERMISSIONS.VIEW_PRESCRIPTIONS, PERMISSIONS.CREATE_PRESCRIPTIONS,
    PERMISSIONS.UPDATE_PRESCRIPTIONS,
    PERMISSIONS.VIEW_APPOINTMENTS, PERMISSIONS.CREATE_APPOINTMENTS,
    PERMISSIONS.UPDATE_APPOINTMENTS, PERMISSIONS.VIEW_SCHEDULE,
    PERMISSIONS.VIEW_LAB_RESULTS, PERMISSIONS.CREATE_LAB_RESULTS,
    PERMISSIONS.EMERGENCY_ACCESS,
  ],

  [ROLES.NURSE]: [
    // Y t√°/ƒêi·ªÅu d∆∞·ª°ng
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.VIEW_USER,
    PERMISSIONS.VIEW_MEDICAL_RECORDS, PERMISSIONS.UPDATE_MEDICAL_RECORDS,
    PERMISSIONS.VIEW_TREATMENT_PLANS, PERMISSIONS.UPDATE_TREATMENT_PLANS,
    PERMISSIONS.VIEW_PRESCRIPTIONS, PERMISSIONS.DISPENSE_MEDICATION,
    PERMISSIONS.VIEW_APPOINTMENTS, PERMISSIONS.UPDATE_APPOINTMENTS,
    PERMISSIONS.VIEW_SCHEDULE,
    PERMISSIONS.VIEW_LAB_RESULTS, PERMISSIONS.CREATE_LAB_RESULTS,
    PERMISSIONS.EMERGENCY_ACCESS,
  ],

  [ROLES.PHARMACIST]: [
    // D∆∞·ª£c sƒ©
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.VIEW_USER,
    PERMISSIONS.VIEW_PRESCRIPTIONS, PERMISSIONS.DISPENSE_MEDICATION,
    PERMISSIONS.VIEW_INVENTORY, PERMISSIONS.UPDATE_INVENTORY,
    PERMISSIONS.MANAGE_MEDICATION_STOCK,
  ],

  [ROLES.LAB_TECHNICIAN]: [
    // K·ªπ thu·∫≠t vi√™n x√©t nghi·ªám
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.VIEW_USER,
    PERMISSIONS.VIEW_LAB_RESULTS, PERMISSIONS.CREATE_LAB_RESULTS,
    PERMISSIONS.UPDATE_LAB_RESULTS,
  ],

  [ROLES.RECEPTIONIST]: [
    // L·ªÖ t√¢n
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.REGISTER_PATIENT,
    PERMISSIONS.VIEW_USER,
    PERMISSIONS.VIEW_APPOINTMENTS, PERMISSIONS.CREATE_APPOINTMENTS,
    PERMISSIONS.UPDATE_APPOINTMENTS, PERMISSIONS.CANCEL_APPOINTMENTS,
    PERMISSIONS.VIEW_SCHEDULE,
  ],

  [ROLES.BILLING_STAFF]: [
    // Nh√¢n vi√™n k·∫ø to√°n
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.VIEW_USER,
    PERMISSIONS.VIEW_BILLS, PERMISSIONS.CREATE_BILLS,
    PERMISSIONS.UPDATE_BILLS, PERMISSIONS.PROCESS_PAYMENTS,
    PERMISSIONS.VIEW_FINANCIAL_REPORTS,
  ],

  [ROLES.PATIENT]: [
    // B·ªánh nh√¢n
    PERMISSIONS.LOGIN, PERMISSIONS.LOGOUT,
    PERMISSIONS.VIEW_MEDICAL_RECORDS, // Ch·ªâ xem c·ªßa b·∫£n th√¢n
    PERMISSIONS.VIEW_PRESCRIPTIONS,   // Ch·ªâ xem c·ªßa b·∫£n th√¢n
    PERMISSIONS.VIEW_APPOINTMENTS,    // Ch·ªâ xem c·ªßa b·∫£n th√¢n
    PERMISSIONS.CREATE_APPOINTMENTS,  // ƒê·∫∑t l·ªãch h·∫πn
    PERMISSIONS.CANCEL_APPOINTMENTS,  // H·ªßy l·ªãch c·ªßa b·∫£n th√¢n
    PERMISSIONS.VIEW_BILLS,           // Ch·ªâ xem c·ªßa b·∫£n th√¢n
  ],

  [ROLES.GUEST]: [
    // Kh√°ch (ch∆∞a ƒëƒÉng nh·∫≠p)
    PERMISSIONS.LOGIN,
    PERMISSIONS.SELF_REGISTER,        // T·ª± ƒëƒÉng k√Ω t√†i kho·∫£n b·ªánh nh√¢n
  ],
});

/**
 * üè• HIERARCHY CHU·∫®N Y T·∫æ
 * - Th·ª© t·ª± t·ª´ cao xu·ªëng th·∫•p
 * - Ph·∫£n √°nh c∆° c·∫•u t·ªï ch·ª©c b·ªánh vi·ªán th·ª±c t·∫ø
 */
const ROLE_HIERARCHY = Object.freeze([
  ROLES.SUPER_ADMIN,          // C·∫•p cao nh·∫•t
  ROLES.HOSPITAL_ADMIN,       // Qu·∫£n tr·ªã b·ªánh vi·ªán
  ROLES.DEPARTMENT_HEAD,      // Tr∆∞·ªüng khoa
  ROLES.DOCTOR,               // B√°c sƒ©
  ROLES.PHARMACIST,           // D∆∞·ª£c sƒ©
  ROLES.NURSE,                // Y t√°
  ROLES.LAB_TECHNICIAN,       // K·ªπ thu·∫≠t vi√™n
  ROLES.BILLING_STAFF,        // K·∫ø to√°n
  ROLES.RECEPTIONIST,         // L·ªÖ t√¢n
  ROLES.PATIENT,              // B·ªánh nh√¢n
  ROLES.GUEST,                // Kh√°ch
]);

/**
 * üß© H√ÄM H·ªñ TR·ª¢ KI·ªÇM TRA QUY·ªÄN
 * Ki·ªÉm tra xem vai tr√≤ c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông kh√¥ng
 * @param {string} role - Vai tr√≤ ng∆∞·ªùi d√πng
 * @param {string} permission - Quy·ªÅn c·∫ßn ki·ªÉm tra
 * @returns {boolean}
 */
function hasPermission(role, permission) {
  if (!role || !permission) return false;
  const allowed = ROLE_PERMISSIONS[role];
  if (!allowed) return false;
  return allowed.includes(permission);
}

/**
 * ‚ö° KI·ªÇM TRA QUY·ªÄN T·∫†O ROLE
 * ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ t·∫°o t√†i kho·∫£n c·∫•p th·∫•p h∆°n
 * @param {string} currentRole - Vai tr√≤ hi·ªán t·∫°i
 * @param {string} targetRole - Vai tr√≤ mu·ªën t·∫°o
 * @returns {boolean}
 */
function canCreateRole(currentRole, targetRole) {
  const currentIndex = ROLE_HIERARCHY.indexOf(currentRole);
  const targetIndex = ROLE_HIERARCHY.indexOf(targetRole);

  if (currentIndex < 0 || targetIndex < 0) return false;

  // SUPER_ADMIN c√≥ th·ªÉ t·∫°o m·ªçi role (tr·ª´ ch√≠nh n√≥ trong logic kh√°c)
  if (currentRole === ROLES.SUPER_ADMIN) {
    return targetRole !== ROLES.SUPER_ADMIN;
  }

  // HOSPITAL_ADMIN c√≥ th·ªÉ t·∫°o DEPARTMENT_HEAD, DOCTOR v√† c√°c role th·∫•p h∆°n
  if (currentRole === ROLES.HOSPITAL_ADMIN) {
    return targetIndex >= 2; // T·ª´ DEPARTMENT_HEAD tr·ªü xu·ªëng
  }

  // DEPARTMENT_HEAD c√≥ th·ªÉ t·∫°o DOCTOR, NURSE, LAB_TECHNICIAN
  if (currentRole === ROLES.DEPARTMENT_HEAD) {
    return [ROLES.DOCTOR, ROLES.NURSE, ROLES.LAB_TECHNICIAN].includes(targetRole);
  }

  // M·∫∑c ƒë·ªãnh: kh√¥ng ƒë∆∞·ª£c t·∫°o c√πng c·∫•p ho·∫∑c cao h∆°n
  return targetIndex > currentIndex;
}

/**
 * üö® KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P D·ªÆ LI·ªÜU B·ªÜNH NH√ÇN
 * Quan tr·ªçng: Tu√¢n th·ªß HIPAA v√† b·∫£o v·ªá quy·ªÅn ri√™ng t∆∞
 * @param {string} userRole - Vai tr√≤ ng∆∞·ªùi truy c·∫≠p
 * @param {string} patientId - ID b·ªánh nh√¢n
 * @param {string} accessorId - ID ng∆∞·ªùi truy c·∫≠p
 * @param {boolean} isEmergency - C√≥ ph·∫£i t√¨nh hu·ªëng kh·∫©n c·∫•p
 * @returns {boolean}
 */
function canAccessPatientData(userRole, patientId, accessorId, isEmergency = false) {
  // üöë TR∆Ø·ªúNG H·ª¢P KH·∫®N C·∫§P: Cho ph√©p truy c·∫≠p
  if (isEmergency && hasPermission(userRole, PERMISSIONS.EMERGENCY_ACCESS)) {
    return true;
  }

  // üë§ B·ªÜNH NH√ÇN: Ch·ªâ xem d·ªØ li·ªáu c·ªßa ch√≠nh m√¨nh
  if (userRole === ROLES.PATIENT) {
    return patientId === accessorId;
  }

  // üè• NH√ÇN VI√äN Y T·∫æ: ƒê∆∞·ª£c xem theo ph√¢n quy·ªÅn
  const medicalStaff = [
    ROLES.DOCTOR, ROLES.NURSE, ROLES.DEPARTMENT_HEAD, 
    ROLES.HOSPITAL_ADMIN, ROLES.SUPER_ADMIN
  ];
  
  if (medicalStaff.includes(userRole)) {
    return hasPermission(userRole, PERMISSIONS.VIEW_MEDICAL_RECORDS);
  }

  return false;
}

/**
 * üìä L·∫§Y DANH S√ÅCH ROLE C√ì TH·ªÇ T·∫†O
 * @param {string} currentRole - Vai tr√≤ hi·ªán t·∫°i
 * @returns {string[]}
 */
function getCreatableRoles(currentRole) {
  return ROLE_HIERARCHY.filter(targetRole => canCreateRole(currentRole, targetRole));
}

/**
 * üîç KI·ªÇM TRA QUY·ªÄN THEO MODULE
 * @param {string} role - Vai tr√≤
 * @param {string} module - Module c·∫ßn ki·ªÉm tra (USER, MEDICAL, etc.)
 * @returns {boolean}
 */
function hasModuleAccess(role, module) {
  const modulePermissions = Object.values(PERMISSIONS).filter(p => 
    p.startsWith(`${module}.`)
  );
  
  return modulePermissions.some(permission => hasPermission(role, permission));
}

/**
 * üéØ L·∫§Y DANH S√ÅCH PERMISSIONS THEO ROLE
 * @param {string} role - Vai tr√≤
 * @returns {string[]}
 */
function getRolePermissions(role) {
  return ROLE_PERMISSIONS[role] || [];
}

/**
 * üîÑ KI·ªÇM TRA QUY·ªÄN QU·∫¢N L√ù USER
 * @param {string} currentRole - Vai tr√≤ hi·ªán t·∫°i
 * @param {string} targetRole - Vai tr√≤ m·ª•c ti√™u
 * @returns {boolean}
 */
function canManageUser(currentRole, targetRole) {
  const currentIndex = ROLE_HIERARCHY.indexOf(currentRole);
  const targetIndex = ROLE_HIERARCHY.indexOf(targetRole);

  if (currentIndex < 0 || targetIndex < 0) return false;

  // SUPER_ADMIN c√≥ th·ªÉ qu·∫£n l√Ω m·ªçi role (tr·ª´ ch√≠nh n√≥ trong logic kh√°c)
  if (currentRole === ROLES.SUPER_ADMIN) {
    return targetRole !== ROLES.SUPER_ADMIN;
  }

  // C√°c role kh√°c ch·ªâ c√≥ th·ªÉ qu·∫£n l√Ω role th·∫•p h∆°n
  return targetIndex > currentIndex;
}

/**
 * üìã L·∫§Y DANH S√ÅCH PERMISSIONS THEO NH√ìM
 * @returns {Object}
 */
function getPermissionsByGroup() {
  const groups = {};
  
  Object.values(PERMISSIONS).forEach(permission => {
    const [group] = permission.split('.');
    if (!groups[group]) {
      groups[group] = [];
    }
    groups[group].push(permission);
  });
  
  return groups;
}

/**
 * üéØ KI·ªÇM TRA QUY·ªÄN XEM TH√îNG TIN NH·∫†Y C·∫¢M
 * @param {string} role - Vai tr√≤
 * @returns {boolean}
 */
function canViewSensitiveInfo(role) {
  return hasPermission(role, PERMISSIONS.VIEW_USER_SENSITIVE);
}

/**
 * üîê KI·ªÇM TRA QUY·ªÄN H·ªÜ TH·ªêNG
 * @param {string} role - Vai tr√≤
 * @returns {boolean}
 */
function hasSystemAccess(role) {
  const systemPermissions = [
    PERMISSIONS.SYSTEM_CONFIG,
    PERMISSIONS.AUDIT_LOG_VIEW,
    PERMISSIONS.BACKUP_DATA,
    PERMISSIONS.RESTORE_DATA
  ];
  
  return systemPermissions.some(permission => hasPermission(role, permission));
}

module.exports = {
  ROLES,
  PERMISSIONS,
  ROLE_PERMISSIONS,
  ROLE_HIERARCHY,
  hasPermission,
  canCreateRole,
  canAccessPatientData,
  getCreatableRoles,
  hasModuleAccess,
  getRolePermissions,
  canManageUser,
  getPermissionsByGroup,
  canViewSensitiveInfo,
  hasSystemAccess,
};