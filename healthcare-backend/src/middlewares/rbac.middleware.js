const { 
  ROLES, 
  PERMISSIONS, 
  ROLE_PERMISSIONS, 
  ROLE_HIERARCHY,
  hasPermission,
  canCreateRole,
  canAccessPatientData 
} = require('../constants/roles');
const { AppError, ERROR_CODES } = require('./error.middleware');

/**
 * üõ°Ô∏è MIDDLEWARE RBAC (ROLE-BASED ACCESS CONTROL) CHO HEALTHCARE SYSTEM
 * - Ki·ªÉm tra vai tr√≤ v√† quy·ªÅn h·∫°n chi ti·∫øt
 * - H·ªó tr·ª£ emergency access override
 * - Ki·ªÉm tra hierarchy trong t·ªï ch·ª©c y t·∫ø
 */

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA VAI TR√í
 */
function requireRole(...allowedRoles) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    // üéØ CHO PH√âP TRUY C·∫¨P KH·∫®N C·∫§P
    if (req.isEmergency && hasPermission(req.user.role, PERMISSIONS.EMERGENCY_ACCESS)) {
      console.log(`üö® Emergency access granted to ${req.user.role} for ${req.originalUrl}`);
      return next();
    }

    // üéØ KI·ªÇM TRA VAI TR√í
    if (!allowedRoles.includes(req.user.role) && !allowedRoles.includes('ANY')) {
      return next(new AppError(
        `Y√™u c·∫ßu vai tr√≤: ${allowedRoles.join(', ')}. Vai tr√≤ hi·ªán t·∫°i: ${req.user.role}`,
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN C·ª§ TH·ªÇ
 */
const requirePermission = (permission) => {
  return (req, res, next) => {
    try {
      console.log('üîê [RBAC] Checking permission:', {
        userId: req.user?._id,
        userRole: req.user?.role,
        requiredPermission: permission,
        path: req.path,
        method: req.method
      });

      // Ki·ªÉm tra user ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
      if (!req.user) {
        console.error('‚ùå [RBAC] No user found in request');
        throw new AppError('Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c', 401, 'UNAUTHORIZED');
      }

      const userRole = req.user.role;
      
      // SUPER_ADMIN c√≥ to√†n quy·ªÅn
      if (userRole === 'SUPER_ADMIN') {
        console.log('‚úÖ [RBAC] SUPER_ADMIN - Bypass all permissions');
        return next();
      }

      // Ki·ªÉm tra permission
      if (!hasPermission(userRole, permission)) {
        console.error('‚ùå [RBAC] Permission denied:', {
          userRole,
          requiredPermission: permission,
          availablePermissions: ROLE_PERMISSIONS[userRole]
        });
        
        throw new AppError(
          'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y', 
          403, 
          'FORBIDDEN'
        );
      }

      console.log('‚úÖ [RBAC] Permission granted');
      next();
    } catch (error) {
      next(error);
    }
  };
};

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN T·∫†O ROLE
 */
function requireRoleCreation(targetRole) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    if (!canCreateRole(req.user.role, targetRole)) {
      return next(new AppError(
        `B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o t√†i kho·∫£n v·ªõi vai tr√≤ ${targetRole}`,
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P D·ªÆ LI·ªÜU B·ªÜNH NH√ÇN
 */
function requirePatientDataAccess(patientIdParam = 'patientId') {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    const patientId = req.params[patientIdParam] || req.body.patientId || req.query.patientId;
    
    if (!patientId) {
      return next(new AppError('Thi·∫øu th√¥ng tin patientId', 400, ERROR_CODES.VALIDATION_FAILED));
    }

    // üéØ KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P
    const hasAccess = canAccessPatientData(
      req.user.role, 
      patientId, 
      req.user._id.toString(), 
      req.isEmergency
    );

    if (!hasAccess) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu b·ªánh nh√¢n n√†y',
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN THEO MODULE
 */
function requireModuleAccess(module) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    // üéØ L·∫§Y T·∫§T C·∫¢ PERMISSIONS TRONG MODULE
    const modulePermissions = Object.values(PERMISSIONS).filter(p => 
      p.startsWith(`${module}.`)
    );
    
    // üéØ KI·ªÇM TRA XEM C√ì √çT NH·∫§T 1 QUY·ªÄN TRONG MODULE
    const hasModulePermission = modulePermissions.some(permission => 
      hasPermission(req.user.role, permission)
    );

    if (!hasModulePermission) {
      return next(new AppError(
        `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p module: ${module}`,
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN XEM TH√îNG TIN NH·∫†Y C·∫¢M
 */
function requireSensitiveDataAccess() {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    if (!hasPermission(req.user.role, PERMISSIONS.VIEW_USER_SENSITIVE)) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin nh·∫°y c·∫£m',
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN AUDIT LOG
 */
function requireAuditLogAccess() {
  return requirePermission(PERMISSIONS.AUDIT_LOG_VIEW);
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN SYSTEM CONFIG
 */
function requireSystemConfigAccess() {
  return requirePermission(PERMISSIONS.SYSTEM_CONFIG);
}

/**
 * üéØ MIDDLEWARE GHI LOG HO·∫†T ƒê·ªòNG RBAC
 */
function rbacLogger(action) {
  return (req, res, next) => {
    console.log(`üîê RBAC Check: ${req.user.role} attempting ${action} on ${req.originalUrl}`);
    next();
  };
}

const requireAnyPermission = (permissions = []) => {
  return (req, res, next) => {
    try {
      if (!req.user) {
        throw new AppError('Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c', 401, 'UNAUTHORIZED');
      }

      const userRole = req.user.role;
      
      // SUPER_ADMIN c√≥ to√†n quy·ªÅn
      if (userRole === 'SUPER_ADMIN') {
        return next();
      }

      // Ki·ªÉm tra n·∫øu c√≥ √≠t nh·∫•t m·ªôt permission
      const hasAnyPermission = permissions.some(permission => 
        hasPermission(userRole, permission)
      );

      if (!hasAnyPermission) {
        throw new AppError(
          'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y', 
          403, 
          'FORBIDDEN'
        );
      }

      next();
    } catch (error) {
      next(error);
    }
  };
};

const requireAllPermissions = (permissions = []) => {
  return (req, res, next) => {
    try {
      if (!req.user) {
        throw new AppError('Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c', 401, 'UNAUTHORIZED');
      }

      const userRole = req.user.role;
      
      // SUPER_ADMIN c√≥ to√†n quy·ªÅn
      if (userRole === 'SUPER_ADMIN') {
        return next();
      }

      // Ki·ªÉm tra n·∫øu c√≥ t·∫•t c·∫£ permissions
      const hasAllPermissions = permissions.every(permission => 
        hasPermission(userRole, permission)
      );

      if (!hasAllPermissions) {
        throw new AppError(
          'B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y', 
          403, 
          'FORBIDDEN'
        );
      }

      next();
    } catch (error) {
      next(error);
    }
  };
};

/**
 * Middleware ki·ªÉm tra role hierarchy
 * Cho ph√©p user c√≥ role cao h∆°n truy c·∫≠p t√†i nguy√™n c·ªßa role th·∫•p h∆°n
 */
const requireHigherRole = (targetRole) => {
  return (req, res, next) => {
    try {
      if (!req.user) {
        throw new AppError('Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c', 401, 'UNAUTHORIZED');
      }

      const userRole = req.user.role;
      const userRoleIndex = ROLE_HIERARCHY.indexOf(userRole);
      const targetRoleIndex = ROLE_HIERARCHY.indexOf(targetRole);

      if (userRoleIndex === -1 || targetRoleIndex === -1) {
        throw new AppError('Role kh√¥ng h·ª£p l·ªá', 400, 'INVALID_ROLE');
      }

      // SUPER_ADMIN c√≥ to√†n quy·ªÅn
      if (userRole === 'SUPER_ADMIN') {
        return next();
      }

      // Ki·ªÉm tra n·∫øu user role cao h∆°n target role
      if (userRoleIndex > targetRoleIndex) {
        throw new AppError(
          'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y', 
          403, 
          'FORBIDDEN'
        );
      }

      next();
    } catch (error) {
      next(error);
    }
  };
};

/**
 * Middleware ki·ªÉm tra quy·ªÅn s·ªü h·ªØu ho·∫∑c permission
 * Cho ph√©p user truy c·∫≠p t√†i nguy√™n c·ªßa ch√≠nh h·ªç ho·∫∑c c√≥ permission
 */
const requireOwnershipOrPermission = (permission, idField = '_id') => {
  return (req, res, next) => {
    try {
      if (!req.user) {
        throw new AppError('Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c', 401, 'UNAUTHORIZED');
      }

      const userRole = req.user.role;
      const userId = req.user._id.toString();
      const resourceId = req.params[idField] || req.body[idField];

      // SUPER_ADMIN c√≥ to√†n quy·ªÅn
      if (userRole === 'SUPER_ADMIN') {
        return next();
      }

      // Cho ph√©p truy c·∫≠p n·∫øu l√† t√†i nguy√™n c·ªßa ch√≠nh h·ªç
      if (resourceId && userId === resourceId) {
        console.log('‚úÖ [RBAC] Ownership access granted');
        return next();
      }

      // Ki·ªÉm tra permission
      if (!hasPermission(userRole, permission)) {
        throw new AppError(
          'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y', 
          403, 
          'FORBIDDEN'
        );
      }

      console.log('‚úÖ [RBAC] Permission-based access granted');
      next();
    } catch (error) {
      next(error);
    }
  };
};

module.exports = {
  requireRole,
  requirePermission,
  requireRoleCreation,
  requirePatientDataAccess,
  requireModuleAccess,
  requireSensitiveDataAccess,
  requireAuditLogAccess,
  requireSystemConfigAccess,
  rbacLogger,
  requireAnyPermission,
  requireAllPermissions,
  requireHigherRole,
  requireOwnershipOrPermission,
};
