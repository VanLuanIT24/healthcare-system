const { 
  ROLES, 
  PERMISSIONS, 
  ROLE_PERMISSIONS, 
  ROLE_HIERARCHY,
  hasPermission,
  canCreateRole,
  canAccessPatientData 
} = require('../constants/roles');
const { AppError, ERROR_CODES } = require('./error.middleware');

/**
 * üõ°Ô∏è MIDDLEWARE RBAC (ROLE-BASED ACCESS CONTROL) CHO HEALTHCARE SYSTEM
 * - Ki·ªÉm tra vai tr√≤ v√† quy·ªÅn h·∫°n chi ti·∫øt
 * - H·ªó tr·ª£ emergency access override
 * - Ki·ªÉm tra hierarchy trong t·ªï ch·ª©c y t·∫ø
 */

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA VAI TR√í
 */
function requireRole(...allowedRoles) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    // üéØ CHO PH√âP TRUY C·∫¨P KH·∫®N C·∫§P
    if (req.isEmergency && hasPermission(req.user.role, PERMISSIONS.EMERGENCY_ACCESS)) {
      console.log(`üö® Emergency access granted to ${req.user.role} for ${req.originalUrl}`);
      return next();
    }

    // üéØ KI·ªÇM TRA VAI TR√í
    if (!allowedRoles.includes(req.user.role) && !allowedRoles.includes('ANY')) {
      return next(new AppError(
        `Y√™u c·∫ßu vai tr√≤: ${allowedRoles.join(', ')}. Vai tr√≤ hi·ªán t·∫°i: ${req.user.role}`,
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN C·ª§ TH·ªÇ
 */
function requirePermission(permission) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    // üéØ CHO PH√âP TRUY C·∫¨P KH·∫®N C·∫§P
    if (req.isEmergency && hasPermission(req.user.role, PERMISSIONS.EMERGENCY_ACCESS)) {
      console.log(`üö® Emergency permission override for ${permission}`);
      return next();
    }

    // üéØ KI·ªÇM TRA QUY·ªÄN
    if (!hasPermission(req.user.role, permission)) {
      return next(new AppError(
        `Kh√¥ng c√≥ quy·ªÅn: ${permission}`,
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN T·∫†O ROLE
 */
function requireRoleCreation(targetRole) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    if (!canCreateRole(req.user.role, targetRole)) {
      return next(new AppError(
        `B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o t√†i kho·∫£n v·ªõi vai tr√≤ ${targetRole}`,
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P D·ªÆ LI·ªÜU B·ªÜNH NH√ÇN
 */
function requirePatientDataAccess(patientIdParam = 'patientId') {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    const patientId = req.params[patientIdParam] || req.body.patientId || req.query.patientId;
    
    if (!patientId) {
      return next(new AppError('Thi·∫øu th√¥ng tin patientId', 400, ERROR_CODES.VALIDATION_FAILED));
    }

    // üéØ KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P
    const hasAccess = canAccessPatientData(
      req.user.role, 
      patientId, 
      req.user._id.toString(), 
      req.isEmergency
    );

    if (!hasAccess) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu b·ªánh nh√¢n n√†y',
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN THEO MODULE
 */
function requireModuleAccess(module) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    // üéØ L·∫§Y T·∫§T C·∫¢ PERMISSIONS TRONG MODULE
    const modulePermissions = Object.values(PERMISSIONS).filter(p => 
      p.startsWith(`${module}.`)
    );
    
    // üéØ KI·ªÇM TRA XEM C√ì √çT NH·∫§T 1 QUY·ªÄN TRONG MODULE
    const hasModulePermission = modulePermissions.some(permission => 
      hasPermission(req.user.role, permission)
    );

    if (!hasModulePermission) {
      return next(new AppError(
        `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p module: ${module}`,
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN XEM TH√îNG TIN NH·∫†Y C·∫¢M
 */
function requireSensitiveDataAccess() {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    if (!hasPermission(req.user.role, PERMISSIONS.VIEW_USER_SENSITIVE)) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin nh·∫°y c·∫£m',
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN AUDIT LOG
 */
function requireAuditLogAccess() {
  return requirePermission(PERMISSIONS.AUDIT_LOG_VIEW);
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN SYSTEM CONFIG
 */
function requireSystemConfigAccess() {
  return requirePermission(PERMISSIONS.SYSTEM_CONFIG);
}

/**
 * üéØ MIDDLEWARE GHI LOG HO·∫†T ƒê·ªòNG RBAC
 */
function rbacLogger(action) {
  return (req, res, next) => {
    console.log(`üîê RBAC Check: ${req.user.role} attempting ${action} on ${req.originalUrl}`);
    next();
  };
}

module.exports = {
  requireRole,
  requirePermission,
  requireRoleCreation,
  requirePatientDataAccess,
  requireModuleAccess,
  requireSensitiveDataAccess,
  requireAuditLogAccess,
  requireSystemConfigAccess,
  rbacLogger,
};
