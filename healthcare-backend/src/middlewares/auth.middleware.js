const { verifyAccessToken } = require('../utils/jwt');
const User = require('../models/user.model');
const { ROLES, hasPermission, ROLE_PERMISSIONS } = require('../constants/roles');
const { AppError, ERROR_CODES } = require('./error.middleware');

/**
 * üõ°Ô∏è MIDDLEWARE X√ÅC TH·ª∞C JWT V√Ä RBAC CHO HEALTHCARE SYSTEM
 * - X√°c th·ª±c JWT token v√† t·∫£i th√¥ng tin ng∆∞·ªùi d√πng
 * - Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
 * - G·∫Øn th√¥ng tin permissions v√†o request
 */

/**
 * MIDDLEWARE X√ÅC TH·ª∞C CH√çNH
 */
async function authenticate(req, res, next) {
  try {
    // üéØ B·ªé QUA N·∫æU ROUTE L√Ä PUBLIC
    if (req.isPublic) {
      return next();
    }

    // üéØ KI·ªÇM TRA AUTHORIZATION HEADER
    const authHeader = req.headers.authorization;
    if (!authHeader) {
      throw new AppError('Authorization header l√† b·∫Øt bu·ªôc', 401, ERROR_CODES.AUTH_INVALID_TOKEN);
    }

    // üéØ KI·ªÇM TRA ƒê·ªäNH D·∫†NG TOKEN
    const parts = authHeader.split(' ');
    if (parts.length !== 2 || parts[0] !== 'Bearer') {
      throw new AppError('ƒê·ªãnh d·∫°ng token kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: Bearer <token>', 401, ERROR_CODES.AUTH_INVALID_TOKEN);
    }

    const token = parts[1];

    // üéØ X√ÅC TH·ª∞C TOKEN
    const payload = verifyAccessToken(token);
    
    // üéØ T·∫¢I TH√îNG TIN NG∆Ø·ªúI D√ôNG T·ª™ DATABASE
    const user = await User.findById(payload.sub)
      .select('-passwordHash -refreshTokens')
      .lean();
    
    if (!user) {
      throw new AppError('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i', 401, ERROR_CODES.AUTH_INVALID_TOKEN);
    }

    // üéØ KI·ªÇM TRA TR·∫†NG TH√ÅI T√ÄI KHO·∫¢N
    if (user.status !== 'ACTIVE') {
      const errorMessage = getAccountStatusMessage(user.status);
      throw new AppError(errorMessage, 403, ERROR_CODES.AUTH_ACCOUNT_LOCKED);
    }

    // üéØ L·∫§Y DANH S√ÅCH PERMISSIONS THEO ROLE
    const userPermissions = ROLE_PERMISSIONS[user.role] || [];

    // üéØ G·∫ÆN TH√îNG TIN USER ƒê·∫¶Y ƒê·ª¶ V√ÄO REQUEST
    req.user = {
      _id: user._id,
      sub: user._id,
      email: user.email,
      role: user.role,
      name: user.name,
      department: user.department,
      status: user.status,
      permissions: userPermissions,
      lastLogin: user.lastLogin,
      createdAt: user.createdAt,
    };

    // üéØ LOG HO·∫†T ƒê·ªòNG ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG
    console.log(`üîê User authenticated: ${user.email} (${user.role})`);

    next();

  } catch (error) {
    // üéØ X·ª¨ L√ù L·ªñI X√ÅC TH·ª∞C
    if (error instanceof AppError) {
      return next(error);
    }
    
    // üéØ L·ªñI T·ª™ JWT HO·∫∂C DATABASE
    const authError = new AppError(
      error.message || 'Token kh√¥ng h·ª£p l·ªá',
      401,
      ERROR_CODES.AUTH_INVALID_TOKEN
    );
    next(authError);
  }
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA PERMISSION
 */
function requirePermission(permission) {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    if (!hasPermission(req.user.role, permission)) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y', 
        403, 
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA ROLE
 */
function requireRole(roles) {
  const roleArray = Array.isArray(roles) ? roles : [roles];
  
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    if (!roleArray.includes(req.user.role)) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y', 
        403, 
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P D·ªÆ LI·ªÜU B·ªÜNH NH√ÇN
 */
function requirePatientAccess(patientIdField = 'patientId') {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    const patientId = req.params[patientIdField] || req.body[patientIdField] || req.query[patientIdField];
    
    // üéØ B√ÅC Sƒ®, Y T√Å, QU·∫¢N TR·ªä ƒê∆Ø·ª¢C TRUY C·∫¨P T·∫§T C·∫¢
    const canAccessAll = ['DOCTOR', 'NURSE', 'HOSPITAL_ADMIN', 'SUPER_ADMIN', 'DEPARTMENT_HEAD'].includes(req.user.role);
    
    // üéØ B·ªÜNH NH√ÇN CH·ªà ƒê∆Ø·ª¢C TRUY C·∫¨P D·ªÆ LI·ªÜU C·ª¶A CH√çNH M√åNH
    if (req.user.role === 'PATIENT' && patientId !== req.user._id.toString()) {
      return next(new AppError(
        'B·∫°n ch·ªâ ƒë∆∞·ª£c xem d·ªØ li·ªáu c·ªßa ch√≠nh m√¨nh',
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    // üéØ NH√ÇN VI√äN H√ÄNH CH√çNH C√ì QUY·ªÄN H·∫†N CH·∫æ
    const restrictedRoles = ['RECEPTIONIST', 'BILLING_STAFF'];
    if (restrictedRoles.includes(req.user.role) && !hasPermission(req.user.role, 'MEDICAL.VIEW_RECORDS')) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu b·ªánh nh√¢n',
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    next();
  };
}

/**
 * üéØ MIDDLEWARE KI·ªÇM TRA QUY·ªÄN TRONG T√åNH HU·ªêNG KH·∫®N C·∫§P
 */
function allowEmergencyAccess() {
  return (req, res, next) => {
    if (!req.user) {
      return next(new AppError('Y√™u c·∫ßu x√°c th·ª±c', 401, ERROR_CODES.AUTH_INVALID_TOKEN));
    }

    // üéØ KI·ªÇM TRA HEADER KH·∫®N C·∫§P
    const isEmergency = req.headers['x-emergency-access'] === 'true';
    
    if (isEmergency && !hasPermission(req.user.role, 'EMERGENCY.ACCESS')) {
      return next(new AppError(
        'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p kh·∫©n c·∫•p',
        403,
        ERROR_CODES.AUTH_INSUFFICIENT_PERMISSIONS
      ));
    }

    // üéØ G·∫ÆN C·ªú KH·∫®N C·∫§P V√ÄO REQUEST
    req.isEmergency = isEmergency;
    next();
  };
}

/**
 * üéØ H√ÄM H·ªñ TR·ª¢: TH√îNG B√ÅO TR·∫†NG TH√ÅI T√ÄI KHO·∫¢N
 */
function getAccountStatusMessage(status) {
  const messages = {
    INACTIVE: 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t',
    SUSPENDED: 'T√†i kho·∫£n ƒë√£ b·ªã t·∫°m ng∆∞ng',
    LOCKED: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a do ƒëƒÉng nh·∫≠p sai nhi·ªÅu l·∫ßn',
    PENDING: 'T√†i kho·∫£n ƒëang ch·ªù ph√™ duy·ªát',
    EXPIRED: 'T√†i kho·∫£n ƒë√£ h·∫øt h·∫°n',
  };
  
  return messages[status] || 'T√†i kho·∫£n kh√¥ng ho·∫°t ƒë·ªông';
}

module.exports = {
  authenticate,
  requirePermission,
  requireRole,
  requirePatientAccess,
  allowEmergencyAccess,
};