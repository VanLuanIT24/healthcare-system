const express = require('express');
const router = express.Router();
const userController = require('../controllers/user.controller');
const { authenticate } = require('../middlewares/auth.middleware');
const { 
  requirePermission: rbacRequirePermission
} = require('../middlewares/rbac.middleware');
const { 
  validateBody, 
  validateParams, 
  validateQuery,
  validateCombined 
} = require('../middlewares/validation.middleware');
const userValidation = require('../validations/user.validation');
const { PERMISSIONS, ROLES } = require('../constants/roles');

// üîê T·∫§T C·∫¢ ROUTES ƒê·ªÄU Y√äU C·∫¶U X√ÅC TH·ª∞C
router.use(authenticate);

// üë• USER MANAGEMENT ROUTES - ƒê√É T·ªêI ∆ØU PH√ÇN QUY·ªÄN

// üéØ T·∫†O USER M·ªöI - POST /api/users
router.post(
  '/',
  // Middleware dynamic ƒë·ªÉ ki·ªÉm tra quy·ªÅn t·∫°o user theo role
  (req, res, next) => {
    const { role } = req.body;
    
    if (!role) {
      return res.status(400).json({
        success: false,
        error: 'Role l√† b·∫Øt bu·ªôc'
      });
    }

    // Map role to corresponding permission - ƒê√É B·ªî SUNG
    const permissionMap = {
      [ROLES.PATIENT]: PERMISSIONS.REGISTER_PATIENT,
      [ROLES.DOCTOR]: PERMISSIONS.REGISTER_DOCTOR,
      [ROLES.NURSE]: PERMISSIONS.REGISTER_NURSE,
      [ROLES.PHARMACIST]: PERMISSIONS.REGISTER_PHARMACIST,
      [ROLES.LAB_TECHNICIAN]: PERMISSIONS.REGISTER_LAB_TECHNICIAN,
      [ROLES.RECEPTIONIST]: PERMISSIONS.REGISTER_RECEPTIONIST,
      [ROLES.BILLING_STAFF]: PERMISSIONS.REGISTER_BILLING_STAFF,
      [ROLES.DEPARTMENT_HEAD]: PERMISSIONS.REGISTER_DEPARTMENT_HEAD,
      [ROLES.HOSPITAL_ADMIN]: PERMISSIONS.REGISTER_HOSPITAL_ADMIN,
      [ROLES.SUPER_ADMIN]: PERMISSIONS.REGISTER_HOSPITAL_ADMIN // SUPER_ADMIN c√≥ th·ªÉ t·∫°o HOSPITAL_ADMIN
    };

    const requiredPermission = permissionMap[role];
    
    if (!requiredPermission) {
      return res.status(400).json({
        success: false,
        error: 'Role kh√¥ng h·ª£p l·ªá'
      });
    }

    console.log(`üéØ [ROUTE] Checking permission for role ${role}: ${requiredPermission}`);
    
    // G·ªçi RBAC middleware v·ªõi permission t∆∞∆°ng ·ª©ng
    rbacRequirePermission(requiredPermission)(req, res, next);
  },
  validateBody(userValidation.schemas.createUserBody),
  userController.createUser
);

// üéØ DANH S√ÅCH USER - GET /api/users
router.get(
  '/',
  rbacRequirePermission(PERMISSIONS.VIEW_USER),
  validateQuery(userValidation.schemas.listUsersQuery),
  userController.listUsers
);

// üéØ L·∫§Y TH√îNG TIN PROFILE - GET /api/users/profile
router.get(
  '/profile',
  userController.getUserProfile
);

// üéØ C·∫¨P NH·∫¨T PROFILE - PUT /api/users/profile
router.put(
  '/profile',
  validateBody(userValidation.schemas.updateUserProfileBody),
  userController.updateUserProfile
);

// üéØ L·∫§Y USER THEO ID - GET /api/users/:userId
router.get(
  '/:userId',
  rbacRequirePermission(PERMISSIONS.VIEW_USER),
  validateParams(userValidation.schemas.userIdParams),
  userController.getUserById
);

// üéØ C·∫¨P NH·∫¨T USER - PUT /api/users/:userId
router.put(
  '/:userId',
  rbacRequirePermission(PERMISSIONS.UPDATE_USER), // S·ª≠a th√†nh UPDATE_USER th·ªëng nh·∫•t
  validateCombined({
    params: userValidation.schemas.userIdParams,
    body: userValidation.schemas.updateUserBody
  }),
  userController.updateUser
);

// üéØ V√î HI·ªÜU H√ìA USER - PATCH /api/users/:userId/disable
router.patch(
  '/:userId/disable',
  rbacRequirePermission(PERMISSIONS.DISABLE_USER),
  validateCombined({
    params: userValidation.schemas.userIdParams,
    body: userValidation.schemas.disableUserBody
  }),
  userController.disableUser
);



// üéØ G√ÅN ROLE CHO USER - PATCH /api/users/:userId/role
router.patch(
  '/:userId/role',
  rbacRequirePermission(PERMISSIONS.UPDATE_USER),
  validateCombined({
    params: userValidation.schemas.userIdParams,
    body: userValidation.schemas.assignRoleBody
  }),
  userController.assignRole
);

// üéØ L·∫§Y PERMISSIONS C·ª¶A USER - GET /api/users/:userId/permissions
router.get(
  '/:userId/permissions',
  rbacRequirePermission(PERMISSIONS.VIEW_USER),
  validateParams(userValidation.schemas.userIdParams),
  userController.getUserPermissions
);

// üéØ KI·ªÇM TRA QUY·ªÄN USER - POST /api/users/:userId/check-permission
router.post(
  '/:userId/check-permission',
  rbacRequirePermission(PERMISSIONS.VIEW_USER),
  validateCombined({
    params: userValidation.schemas.userIdParams,
    body: userValidation.schemas.checkUserPermissionBody
  }),
  userController.checkUserPermission
);

// üéØ K√çCH HO·∫†T L·∫†I USER - PATCH /api/users/:userId/enable
router.patch(
  '/:userId/enable',
  rbacRequirePermission(PERMISSIONS.UPDATE_USER),
  validateParams(userValidation.schemas.userIdParams),
  userController.enableUser
);


// üéØ X√ìA USER (SOFT DELETE) - DELETE /api/users/:userId
router.delete(
  '/:userId',
  rbacRequirePermission(PERMISSIONS.DELETE_USER),
  validateCombined({
    params: userValidation.schemas.userIdParams,
    body: userValidation.schemas.disableUserBody // D√πng chung schema v·ªõi disable
  }),
  userController.deleteUser
);

// üéØ KH√îI PH·ª§C USER ƒê√É X√ìA - PATCH /api/users/:userId/restore
router.patch(
  '/:userId/restore',
  rbacRequirePermission(PERMISSIONS.UPDATE_USER),
  validateParams(userValidation.schemas.userIdParams),
  userController.restoreUser
);

// üéØ DANH S√ÅCH USER ƒê√É X√ìA - GET /api/users/deleted/list
router.get(
  '/deleted/list',
  rbacRequirePermission(PERMISSIONS.VIEW_USER),
  validateQuery(userValidation.schemas.listUsersQuery),
  userController.listDeletedUsers
);

module.exports = router;