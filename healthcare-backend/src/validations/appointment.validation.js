const Joi = require('joi');
const { commonSchemas } = require('../middlewares/validation.middleware');

/**
 * üìÖ APPOINTMENT VALIDATION SCHEMAS
 * ƒê·∫£m b·∫£o d·ªØ li·ªáu l·ªãch h·∫πn h·ª£p l·ªá
 */

const appointmentValidation = {
  // üéØ T·∫†O L·ªäCH H·∫∏N
  createAppointment: Joi.object({
    patientId: commonSchemas.objectId.required()
      .messages({
        'any.required': 'Vui l√≤ng ch·ªçn b·ªánh nh√¢n'
      }),
    doctorId: commonSchemas.objectId.required()
      .messages({
        'any.required': 'Vui l√≤ng ch·ªçn b√°c sƒ©'
      }),
    appointmentDate: Joi.date().iso().min('now').required()
      .messages({
        'date.min': 'Th·ªùi gian h·∫πn ph·∫£i ·ªü t∆∞∆°ng lai',
        'any.required': 'Th·ªùi gian h·∫πn l√† b·∫Øt bu·ªôc'
      }),
    duration: Joi.number().integer().min(15).max(180).default(30),
    type: Joi.string().valid('CONSULTATION', 'FOLLOW_UP', 'CHECKUP', 'SURGERY', 'TEST', 'OTHER').required(),
    mode: Joi.string().valid('IN_PERSON', 'TELEMEDICINE', 'PHONE').default('IN_PERSON'),
    location: Joi.string().required()
      .messages({
        'string.empty': 'ƒê·ªãa ƒëi·ªÉm l√† b·∫Øt bu·ªôc',
        'any.required': 'Vui l√≤ng ch·ªçn ƒë·ªãa ƒëi·ªÉm'
      }),
    room: Joi.string().optional(),
    reason: Joi.string().max(500).required()
      .messages({
        'string.empty': 'L√Ω do h·∫πn l√† b·∫Øt bu·ªôc',
        'string.max': 'L√Ω do h·∫πn kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±',
        'any.required': 'Vui l√≤ng nh·∫≠p l√Ω do h·∫πn'
      }),
    description: Joi.string().max(1000).optional(),
    symptoms: Joi.array().items(Joi.string()).optional(),
    preparationInstructions: Joi.string().max(500).optional()
  }),

  
  // üéØ T√åM KI·∫æM L·ªäCH H·∫∏N B·ªÜNH NH√ÇN
  getPatientAppointments: Joi.object({
    status: Joi.string().valid('SCHEDULED', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW').optional(),
    page: Joi.number().integer().min(1).default(1),
    limit: Joi.number().integer().min(1).max(100).default(10),
    startDate: Joi.date().iso().optional(),
    endDate: Joi.date().iso().min(Joi.ref('startDate')).optional()
  }),

  // üéØ T√åM KI·∫æM L·ªäCH H·∫∏N B√ÅC Sƒ®
  getDoctorAppointments: Joi.object({
    status: Joi.string().valid('SCHEDULED', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW').optional(),
    page: Joi.number().integer().min(1).default(1),
    limit: Joi.number().integer().min(1).max(100).default(10),
    date: Joi.date().iso().optional()
  }),

  // üéØ C·∫¨P NH·∫¨T L·ªäCH H·∫∏N
  updateAppointment: Joi.object({
    appointmentDate: Joi.date().iso().min('now').optional(),
    duration: Joi.number().integer().min(15).max(180).optional(),
    type: Joi.string().valid('CONSULTATION', 'FOLLOW_UP', 'CHECKUP', 'SURGERY', 'TEST', 'OTHER').optional(),
    mode: Joi.string().valid('IN_PERSON', 'TELEMEDICINE', 'PHONE').optional(),
    location: Joi.string().optional(),
    room: Joi.string().optional(),
    reason: Joi.string().max(500).optional(),
    description: Joi.string().max(1000).optional(),
    symptoms: Joi.array().items(Joi.string()).optional(),
    preparationInstructions: Joi.string().max(500).optional()
  }),

  // üéØ H·ª¶Y L·ªäCH H·∫∏N
  cancelAppointment: Joi.object({
    reason: Joi.string().max(500).required()
      .messages({
        'string.empty': 'L√Ω do h·ªßy l√† b·∫Øt bu·ªôc',
        'string.max': 'L√Ω do h·ªßy kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±',
        'any.required': 'Vui l√≤ng nh·∫≠p l√Ω do h·ªßy'
      }),
    notes: Joi.string().max(1000).optional()
  }),

  // üéØ T·∫†O L·ªäCH L√ÄM VI·ªÜC
  createSchedule: Joi.object({
    doctorId: commonSchemas.objectId.required(),
    date: Joi.date().iso().min('now').required(),
    startTime: Joi.string().pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/).required(),
    endTime: Joi.string().pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/).required(),
    slotDuration: Joi.number().integer().min(15).max(60).default(30),
    breaks: Joi.array().items(
      Joi.object({
        start: Joi.string().pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/).required(),
        end: Joi.string().pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/).required()
      })
    ).optional()
  }),

  // üéØ L·∫§Y L·ªäCH L√ÄM VI·ªÜC
  getDoctorSchedule: Joi.object({
    date: Joi.date().iso().optional(),
    week: Joi.date().iso().optional()
  })
};

module.exports = appointmentValidation;