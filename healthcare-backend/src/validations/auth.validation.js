// src/validations/auth.validation.js
const Joi = require('joi');
const { commonSchemas } = require('../middlewares/validation.middleware');

/**
 * üõ°Ô∏è VALIDATION SCHEMAS CHO AUTHENTICATION
 * - X√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o cho c√°c API auth
 * - Hi·ªÉn th·ªã th√¥ng b√°o l·ªói r√µ r√†ng, th√¢n thi·ªán
 */

const authValidation = {
  // üéØ ƒêƒÇNG NH·∫¨P
  login: {
    body: Joi.object({
      email: commonSchemas.email.required()
        .messages({
          'any.required': 'Vui l√≤ng nh·∫≠p email'
        }),
      password: Joi.string().min(1).required()
        .messages({
          'string.empty': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u',
          'any.required': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u'
        })
    }).options({ abortEarly: false })
  },

  // üéØ ƒêƒÇNG K√ù USER - ‚úÖ MESSAGES TH√ÇN THI·ªÜN, R√ï R√ÄNG
  registerUser: {
    body: Joi.object({
      email: commonSchemas.email.required()
        .messages({
          'any.required': 'Vui l√≤ng nh·∫≠p email'
        }),
      
      password: commonSchemas.password.required()
        .messages({
          'any.required': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u'
        }),
      
      confirmPassword: Joi.string().valid(Joi.ref('password')).required()
        .messages({
          'any.only': 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp',
          'any.required': 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u',
          'string.empty': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u x√°c nh·∫≠n'
        }),
      
      personalInfo: Joi.object({
        firstName: Joi.string().min(2).max(50).required()
          .messages({
            'string.min': 'H·ªç ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±',
            'string.max': 'H·ªç kh√¥ng ƒë∆∞·ª£c d√†i qu√° 50 k√Ω t·ª±',
            'any.required': 'Vui l√≤ng nh·∫≠p h·ªç',
            'string.empty': 'H·ªç kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
          }),
        
        lastName: Joi.string().min(2).max(50).required()
          .messages({
            'string.min': 'T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±',
            'string.max': 'T√™n kh√¥ng ƒë∆∞·ª£c d√†i qu√° 50 k√Ω t·ª±', 
            'any.required': 'Vui l√≤ng nh·∫≠p t√™n',
            'string.empty': 'T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
          }),
        
        dateOfBirth: commonSchemas.date.required()
          .max('now')
          .messages({
            'date.max': 'Ng√†y sinh kh√¥ng ƒë∆∞·ª£c ·ªü trong t∆∞∆°ng lai',
            'any.required': 'Vui l√≤ng ch·ªçn ng√†y sinh',
            'date.base': 'Ng√†y sinh kh√¥ng h·ª£p l·ªá'
          }),
        
        gender: Joi.string().valid('MALE', 'FEMALE', 'OTHER').required()
          .messages({
            'any.only': 'Gi·ªõi t√≠nh ph·∫£i l√†: MALE, FEMALE ho·∫∑c OTHER',
            'any.required': 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh'
          }),
        
        phone: commonSchemas.phone.required()
          .messages({
            'any.required': 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i'
          })
      }).required()
        .messages({
          'object.base': 'Th√¥ng tin c√° nh√¢n kh√¥ng h·ª£p l·ªá',
          'any.required': 'Vui l√≤ng cung c·∫•p th√¥ng tin c√° nh√¢n'
        }),
      
      role: Joi.string().valid(
        'PATIENT', 'DOCTOR', 'NURSE', 'RECEPTIONIST',
        'PHARMACIST', 'LAB_TECHNICIAN', 'BILLING_STAFF'
      ).default('PATIENT')
        .messages({
          'any.only': 'Vai tr√≤ kh√¥ng h·ª£p l·ªá. Vai tr√≤ h·ª£p l·ªá: PATIENT, DOCTOR, NURSE, RECEPTIONIST, PHARMACIST, LAB_TECHNICIAN, BILLING_STAFF'
        })
    }).options({ abortEarly: false })
  },

  // üéØ QU√äN M·∫¨T KH·∫®U
  forgotPassword: {
    body: Joi.object({
      email: commonSchemas.email.required()
        .messages({
          'any.required': 'Vui l√≤ng nh·∫≠p email'
        })
    }).options({ abortEarly: false })
  },

  // üéØ ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
  resetPassword: {
    body: Joi.object({
      token: Joi.string().required()
        .messages({
          'string.empty': 'Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
          'any.required': 'Token l√† b·∫Øt bu·ªôc'
        }),
      
      newPassword: commonSchemas.password.required()
        .messages({
          'any.required': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi'
        }),
      
      confirmPassword: Joi.string().valid(Joi.ref('newPassword')).required()
        .messages({
          'any.only': 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp',
          'any.required': 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi'
        })
    }).options({ abortEarly: false })
  },

  // üéØ ƒê·ªîI M·∫¨T KH·∫®U
  changePassword: {
    body: Joi.object({
      currentPassword: Joi.string().min(1).required()
        .messages({
          'string.empty': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i',
          'any.required': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i'
        }),
      
      newPassword: commonSchemas.password.required()
        .messages({
          'any.required': 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi'
        }),
      
      confirmPassword: Joi.string().valid(Joi.ref('newPassword')).required()
        .messages({
          'any.only': 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp',
          'any.required': 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi'
        })
    }).options({ abortEarly: false })
  },

  // üéØ REFRESH TOKEN
  refreshToken: {
    body: Joi.object({
      refreshToken: Joi.string().required()
        .messages({
          'string.empty': 'Refresh token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
          'any.required': 'Refresh token l√† b·∫Øt bu·ªôc'
        })
    })
  },

  // üéØ VERIFY EMAIL
  verifyEmail: {
    params: Joi.object({
      token: Joi.string().required()
        .messages({
          'string.empty': 'Token x√°c th·ª±c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
          'any.required': 'Token x√°c th·ª±c l√† b·∫Øt bu·ªôc'
        })
    })
  },

  // üéØ RESEND VERIFICATION EMAIL
  resendVerification: {
    body: Joi.object({
      email: commonSchemas.email.required()
        .messages({
          'any.required': 'Vui l√≤ng nh·∫≠p email'
        })
    })
  }
};

module.exports = authValidation;